{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv(\"bat.csv\",encoding='windows-1252')\n",
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5lVda2czGpU",
        "outputId": "498e6309-e4ed-474f-82ec-fc44f0eba7ab"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['match_no', 'Batsman', 'team', 'Run', 'Ball', '4s', '6s', 'out_by'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "J6PM9ktOXrhY",
        "outputId": "0499aa9e-a100-40b7-a5f0-fd4379852491"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   match_no           Batsman                 team  Run  Ball  4s  6s  \\\n",
              "0         1      Devon Conway  Chennai Super Kings    1     6   0   0   \n",
              "1         1   Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9   \n",
              "2         1         Moeen Ali  Chennai Super Kings   23    17   4   1   \n",
              "3         1        Ben Stokes  Chennai Super Kings    7     6   1   0   \n",
              "4         1     Ambati Rayudu  Chennai Super Kings   12    12   0   1   \n",
              "5         1       Shivam Dube  Chennai Super Kings   19    18   0   1   \n",
              "6         1   Ravindra Jadeja  Chennai Super Kings    1     2   0   0   \n",
              "7         1          MS Dhoni  Chennai Super Kings   14     7   1   1   \n",
              "8         1  Mitchell Santner  Chennai Super Kings    1     3   0   0   \n",
              "9         1   Wriddhiman Saha       Gujarat Titans   25    16   2   2   \n",
              "\n",
              "                   out_by  \n",
              "0          Mohammed Shami  \n",
              "1          Alzarri Joseph  \n",
              "2             Rashid Khan  \n",
              "3             Rashid Khan  \n",
              "4           Joshua Little  \n",
              "5          Mohammed Shami  \n",
              "6          Alzarri Joseph  \n",
              "7                 Not Out  \n",
              "8                 Not Out  \n",
              "9  Rajvardhan Hangargekar  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c02da5e8-4d9b-464b-8e2c-c923eb653a19\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_no</th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>out_by</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>Alzarri Joseph</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>Rashid Khan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Rashid Khan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Joshua Little</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>Shivam Dube</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>19</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>Ravindra Jadeja</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Alzarri Joseph</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>MS Dhoni</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>14</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Not Out</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1</td>\n",
              "      <td>Mitchell Santner</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Out</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1</td>\n",
              "      <td>Wriddhiman Saha</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>25</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Rajvardhan Hangargekar</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c02da5e8-4d9b-464b-8e2c-c923eb653a19')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c02da5e8-4d9b-464b-8e2c-c923eb653a19 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c02da5e8-4d9b-464b-8e2c-c923eb653a19');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-31c29e62-4523-40e3-bde2-25d5e1d57035\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31c29e62-4523-40e3-bde2-25d5e1d57035')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-31c29e62-4523-40e3-bde2-25d5e1d57035 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df_bowl = pd.read_csv(\"iplbowler.csv\",encoding='windows-1252')\n",
        "df_bowl.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AB_8wZSMNfRS",
        "outputId": "28ca8ab7-b19a-4ff6-a96f-87f4f1ca4b2d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['match_no', 'Bowler', 'team', 'over', 'run', 'wicket', 'No_ball',\n",
              "       'ECO'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['50s'] = 0\n",
        "df['100s'] = 0\n",
        "'''\n",
        "adding new columns 50s and 100s based on the  runs made by batsmen in batsmen dataframe\n",
        "'''\n",
        "# Loop through the DataFrame and update '50s' and '100s' based on 'Run' column\n",
        "for index, row in df.iterrows():\n",
        "    if row['Run'] >= 50 and row['Run']<100:\n",
        "        df.at[index, '50s'] = 1\n",
        "    if row['Run'] >= 100:\n",
        "        df.at[index, '100s'] = 1"
      ],
      "metadata": {
        "id": "6RUd3rHfSCrU"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "addding a new coloumn oppositeteam which\n",
        "will assign for each row based on the match_no in batsmen dataframe\n",
        "'''\n",
        "def get_opposite_team(row):\n",
        "    unique_teams = df[df['match_no'] == row['match_no']]['team'].unique()\n",
        "    opposite_team = None\n",
        "    for team in unique_teams:\n",
        "        if team != row['team']:\n",
        "            opposite_team = team\n",
        "            break\n",
        "    return opposite_team\n",
        "\n",
        "# Apply the function to create the 'opposite team' column\n",
        "df['opposite team'] = df.apply(get_opposite_team, axis=1)"
      ],
      "metadata": {
        "id": "Wq9XBTfNSDQI"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# batsmen dataframe\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "43W1s6w8SL3H",
        "outputId": "53020e2b-e3a8-4321-decf-2b02c49dd639"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      match_no          Batsman                 team  Run  Ball  4s  6s  \\\n",
              "0            1     Devon Conway  Chennai Super Kings    1     6   0   0   \n",
              "1            1  Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9   \n",
              "2            1        Moeen Ali  Chennai Super Kings   23    17   4   1   \n",
              "3            1       Ben Stokes  Chennai Super Kings    7     6   1   0   \n",
              "4            1    Ambati Rayudu  Chennai Super Kings   12    12   0   1   \n",
              "...        ...              ...                  ...  ...   ...  ..  ..   \n",
              "1109        70     Shubman Gill       Gujarat Titans  104    52   5   8   \n",
              "1110        70    Vijay Shankar       Gujarat Titans   53    35   7   2   \n",
              "1111        70    Dasun Shanaka       Gujarat Titans    0     3   0   0   \n",
              "1112        70     David Miller       Gujarat Titans    6     7   1   0   \n",
              "1113        70    Rahul Tewatia       Gujarat Titans    4     5   0   0   \n",
              "\n",
              "                 out_by  50s  100s                opposite team  \n",
              "0        Mohammed Shami    0     0               Gujarat Titans  \n",
              "1        Alzarri Joseph    1     0               Gujarat Titans  \n",
              "2           Rashid Khan    0     0               Gujarat Titans  \n",
              "3           Rashid Khan    0     0               Gujarat Titans  \n",
              "4         Joshua Little    0     0               Gujarat Titans  \n",
              "...                 ...  ...   ...                          ...  \n",
              "1109            Not Out    0     1  Royal Challengers Bangalore  \n",
              "1110  Vijaykumar Vyshak    1     0  Royal Challengers Bangalore  \n",
              "1111      Harshal Patel    0     0  Royal Challengers Bangalore  \n",
              "1112     Mohammed Siraj    0     0  Royal Challengers Bangalore  \n",
              "1113            Not Out    0     0  Royal Challengers Bangalore  \n",
              "\n",
              "[1114 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4e1e0ac-1b84-405e-a637-034620523b37\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_no</th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>out_by</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>opposite team</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>Alzarri Joseph</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Joshua Little</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1109</th>\n",
              "      <td>70</td>\n",
              "      <td>Shubman Gill</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>104</td>\n",
              "      <td>52</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>Not Out</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>70</td>\n",
              "      <td>Vijay Shankar</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>53</td>\n",
              "      <td>35</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>Vijaykumar Vyshak</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>70</td>\n",
              "      <td>Dasun Shanaka</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harshal Patel</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>70</td>\n",
              "      <td>David Miller</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Mohammed Siraj</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>70</td>\n",
              "      <td>Rahul Tewatia</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Out</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1114 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4e1e0ac-1b84-405e-a637-034620523b37')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4e1e0ac-1b84-405e-a637-034620523b37 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4e1e0ac-1b84-405e-a637-034620523b37');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d1d7084b-8be5-42e4-9356-41bd6d36f560\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1d7084b-8be5-42e4-9356-41bd6d36f560')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d1d7084b-8be5-42e4-9356-41bd6d36f560 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# bolwers dataframe\n",
        "df_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "6l7DC-srSe87",
        "outputId": "fad9f022-9e0a-4c8a-b737-6ec567529c48"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     match_no             Bowler                         team  over  run  \\\n",
              "0           1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "1           1      Hardik Pandya               Gujarat Titans   3.0   28   \n",
              "2           1      Joshua Little               Gujarat Titans   4.0   41   \n",
              "3           1        Rashid Khan               Gujarat Titans   4.0   26   \n",
              "4           1     Alzarri Joseph               Gujarat Titans   4.0   33   \n",
              "..        ...                ...                          ...   ...  ...   \n",
              "848        70      Wayne Parnell  Royal Challengers Bangalore   3.1   42   \n",
              "849        70  Vijaykumar Vyshak  Royal Challengers Bangalore   4.0   40   \n",
              "850        70    Himanshu Sharma  Royal Challengers Bangalore   3.0   28   \n",
              "851        70      Harshal Patel  Royal Challengers Bangalore   4.0   29   \n",
              "852        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "\n",
              "     wicket  No_ball   ECO  \n",
              "0         2        1   7.3  \n",
              "1         0        0   9.3  \n",
              "2         1        0  10.3  \n",
              "3         2        0   6.5  \n",
              "4         2        0   8.3  \n",
              "..      ...      ...   ...  \n",
              "848       0        1  13.5  \n",
              "849       1        0  10.0  \n",
              "850       0        0   9.3  \n",
              "851       1        0   7.3  \n",
              "852       0        0  16.0  \n",
              "\n",
              "[853 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-42a25e05-f861-4f49-943b-79a6e769956e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_no</th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Hardik Pandya</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Joshua Little</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Alzarri Joseph</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>33</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>70</td>\n",
              "      <td>Wayne Parnell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>3.1</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>13.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>70</td>\n",
              "      <td>Vijaykumar Vyshak</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>70</td>\n",
              "      <td>Himanshu Sharma</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>70</td>\n",
              "      <td>Harshal Patel</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>853 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42a25e05-f861-4f49-943b-79a6e769956e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-42a25e05-f861-4f49-943b-79a6e769956e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-42a25e05-f861-4f49-943b-79a6e769956e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-35249ad8-e94a-4d40-be6b-1e41b4b4e600\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35249ad8-e94a-4d40-be6b-1e41b4b4e600')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-35249ad8-e94a-4d40-be6b-1e41b4b4e600 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "creating a new column in the bowlers datframe by\n",
        "using the batsemn df dataframe by merge methods\n",
        "'''\n",
        "df_bowl = df_bowl.merge(df[['match_no', 'team', 'opposite team']], left_on=['match_no', 'team'], right_on=['match_no', 'team'], how='left')\n"
      ],
      "metadata": {
        "id": "1h6piWd0RA1U"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "jySBtfpyXqou",
        "outputId": "b8686d2c-ff25-4a0f-ee56-cb0372838e4a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      match_no             Bowler                         team  over  run  \\\n",
              "0            1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "1            1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "2            1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "3            1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "4            1     Mohammed Shami               Gujarat Titans   4.0   29   \n",
              "...        ...                ...                          ...   ...  ...   \n",
              "6669        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "6670        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "6671        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "6672        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "6673        70  Michael Bracewell  Royal Challengers Bangalore   1.0   16   \n",
              "\n",
              "      wicket  No_ball   ECO        opposite team  \n",
              "0          2        1   7.3  Chennai Super Kings  \n",
              "1          2        1   7.3  Chennai Super Kings  \n",
              "2          2        1   7.3  Chennai Super Kings  \n",
              "3          2        1   7.3  Chennai Super Kings  \n",
              "4          2        1   7.3  Chennai Super Kings  \n",
              "...      ...      ...   ...                  ...  \n",
              "6669       0        0  16.0       Gujarat Titans  \n",
              "6670       0        0  16.0       Gujarat Titans  \n",
              "6671       0        0  16.0       Gujarat Titans  \n",
              "6672       0        0  16.0       Gujarat Titans  \n",
              "6673       0        0  16.0       Gujarat Titans  \n",
              "\n",
              "[6674 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f13d4e92-a4bb-4877-a886-888d2a6987ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_no</th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Mohammed Shami</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6669</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6670</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6671</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6672</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6673</th>\n",
              "      <td>70</td>\n",
              "      <td>Michael Bracewell</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6674 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f13d4e92-a4bb-4877-a886-888d2a6987ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f13d4e92-a4bb-4877-a886-888d2a6987ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f13d4e92-a4bb-4877-a886-888d2a6987ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3860262f-6caf-4936-814c-adf6ba381c49\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3860262f-6caf-4936-814c-adf6ba381c49')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3860262f-6caf-4936-814c-adf6ba381c49 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "by using merge we will get redudant rows\n",
        "we are removing them by using groupby using columns\n",
        "bolwer and match_no\n",
        "'''\n",
        "df_bowl = df_bowl.groupby(['Bowler','match_no']).first().reset_index()\n",
        "\n",
        "print(len(df_bowl))\n",
        "\n",
        "df_bowl.drop(['match_no'], axis=1, inplace=True)\n",
        "df_bowl.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "Rzd0ON8EXR70",
        "outputId": "d0e9bcc7-5b5b-4061-dd88-e7dd68ceab99"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "853\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Bowler                 team  over  run  wicket  No_ball   ECO  \\\n",
              "0  Abhishek Sharma  Sunrisers Hyderabad   3.0   26       1        0   8.7   \n",
              "1  Abhishek Sharma  Sunrisers Hyderabad   2.0   15       0        0   7.5   \n",
              "2  Abhishek Sharma  Sunrisers Hyderabad   3.0   42       1        0  14.0   \n",
              "3  Abhishek Sharma  Sunrisers Hyderabad   1.0   13       0        0  13.0   \n",
              "4  Abhishek Sharma  Sunrisers Hyderabad   3.0   28       0        0   9.3   \n",
              "5       Adam Zampa     Rajasthan Royals   4.0   43       1        0  10.8   \n",
              "6       Adam Zampa     Rajasthan Royals   4.0   32       1        0   8.0   \n",
              "7       Adam Zampa     Rajasthan Royals   3.0   22       3        0   7.3   \n",
              "8       Adam Zampa     Rajasthan Royals   3.0   40       0        0  13.3   \n",
              "9       Adam Zampa     Rajasthan Royals   4.0   25       2        0   6.3   \n",
              "\n",
              "                 opposite team  \n",
              "0               Delhi Capitals  \n",
              "1             Rajasthan Royals  \n",
              "2         Lucknow Super Giants  \n",
              "3               Gujarat Titans  \n",
              "4  Royal Challengers Bangalore  \n",
              "5          Chennai Super Kings  \n",
              "6               Gujarat Titans  \n",
              "7          Chennai Super Kings  \n",
              "8               Gujarat Titans  \n",
              "9  Royal Challengers Bangalore  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-11b58ca0-8b47-41fe-acfe-13c92ce38a2e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Adam Zampa</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>43</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10.8</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Adam Zampa</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Adam Zampa</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.0</td>\n",
              "      <td>22</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Adam Zampa</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.0</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.3</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Adam Zampa</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>25</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11b58ca0-8b47-41fe-acfe-13c92ce38a2e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-11b58ca0-8b47-41fe-acfe-13c92ce38a2e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-11b58ca0-8b47-41fe-acfe-13c92ce38a2e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-50f3fe73-b7f9-4dd6-bbac-cff6c7010e05\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50f3fe73-b7f9-4dd6-bbac-cff6c7010e05')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-50f3fe73-b7f9-4dd6-bbac-cff6c7010e05 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "deleting unneccessary columns in batsmen dataframe df\n",
        "'''\n",
        "df=df.drop(columns=['out_by'])\n",
        "df=df.drop(columns=['match_no'])"
      ],
      "metadata": {
        "id": "2ge03swKrWsr"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "checking whether any player has team and opposite of same values in batsmen dataframe\n",
        "'''\n",
        "are_columns_equal = df['team'] == df['opposite team']\n",
        "len(df[are_columns_equal])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UuTm_3SBq826",
        "outputId": "0e8a1e1e-44f9-4412-ccb7-742eedbe6825"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "checking for any row has null values\n",
        "and removing those  columns  for bowlers dataset\n",
        "'''\n",
        "missing_values_count = df_bowl.isnull().sum()\n",
        "missing_values_count\n",
        "df_bowl.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "FtD1UcHpruuX"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WMnh1l9Qacue"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "checking whether any player has team and opposite of same values in bowler dataframe\n",
        "\n",
        "'''\n",
        "are_columns_equal = df_bowl['team'] == df_bowl['opposite team']\n",
        "len(df_bowl[are_columns_equal])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tC0IgFNhZ1rA",
        "outputId": "d84093da-ab06-417c-d241-f5930db0f93d"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "w-9EhYwsagmo",
        "outputId": "35a73130-b0f1-4bb3-c002-f32b71b9a31f"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Bowler                 team  over  run  wicket  No_ball   ECO  \\\n",
              "0     Abhishek Sharma  Sunrisers Hyderabad   3.0   26       1        0   8.7   \n",
              "1     Abhishek Sharma  Sunrisers Hyderabad   2.0   15       0        0   7.5   \n",
              "2     Abhishek Sharma  Sunrisers Hyderabad   3.0   42       1        0  14.0   \n",
              "3     Abhishek Sharma  Sunrisers Hyderabad   1.0   13       0        0  13.0   \n",
              "4     Abhishek Sharma  Sunrisers Hyderabad   3.0   28       0        0   9.3   \n",
              "..                ...                  ...   ...  ...     ...      ...   ...   \n",
              "848  Yuzvendra Chahal     Rajasthan Royals   3.5   22       1        0   6.3   \n",
              "849  Yuzvendra Chahal     Rajasthan Royals   4.0   29       4        0   7.3   \n",
              "850  Yuzvendra Chahal     Rajasthan Royals   4.0   25       4        0   6.3   \n",
              "851  Yuzvendra Chahal     Rajasthan Royals   4.0   37       0        0   9.3   \n",
              "852  Yuzvendra Chahal     Rajasthan Royals   4.0   40       0        0  10.0   \n",
              "\n",
              "                   opposite team  \n",
              "0                 Delhi Capitals  \n",
              "1               Rajasthan Royals  \n",
              "2           Lucknow Super Giants  \n",
              "3                 Gujarat Titans  \n",
              "4    Royal Challengers Bangalore  \n",
              "..                           ...  \n",
              "848               Gujarat Titans  \n",
              "849          Sunrisers Hyderabad  \n",
              "850        Kolkata Knight Riders  \n",
              "851  Royal Challengers Bangalore  \n",
              "852                 Punjab Kings  \n",
              "\n",
              "[830 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de458280-67c3-4d60-9642-35e9dfc9b055\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.5</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>25</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>Punjab Kings</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>830 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de458280-67c3-4d60-9642-35e9dfc9b055')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-de458280-67c3-4d60-9642-35e9dfc9b055 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-de458280-67c3-4d60-9642-35e9dfc9b055');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-33dbbc23-46e5-4820-a459-516fd3866048\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33dbbc23-46e5-4820-a459-516fd3866048')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-33dbbc23-46e5-4820-a459-516fd3866048 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "\n",
        "#checking for any row has null values and removing those  columns  for bowlers dataset\n",
        "\n",
        "'''\n",
        "missing_values_count = df.isnull().sum()\n",
        "missing_values_count\n",
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "0vabDMEbZuZI"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "collecting all the bowlers and assigning a unique id to them\n",
        "'''\n",
        "unique_bowler = df_bowl['Bowler'].unique()\n",
        "batsman_mapping = {bowler: idx for idx, bowler in enumerate(unique_bowler)}\n",
        "df_bowl['bowler_ID'] = df_bowl['Bowler'].map(batsman_mapping)"
      ],
      "metadata": {
        "id": "VqX0YnHhaxrn"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "collecting all the batsmen and assigning a unique id to them\n",
        "'''\n",
        "unique_batsmen = df['Batsman'].unique()\n",
        "batsman_mapping = {batsman: idx for idx, batsman in enumerate(unique_batsmen)}\n",
        "df['Batsman_ID'] = df['Batsman'].map(batsman_mapping)"
      ],
      "metadata": {
        "id": "ebt-aigWq_vT"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "collecting all the team  and assigning a unique id to them\n",
        "'''\n",
        "unique_teams = df['team'].unique()\n",
        "team_mapping = {team: idx for idx, team in enumerate(unique_teams)}\n",
        "\n",
        "# Add a new column 'Team_ID' to the DataFrame with unique identifiers\n",
        "df['Team_ID'] = df['team'].map(team_mapping)\n",
        "df['Opposite_Team_ID']=df['opposite team'].map(team_mapping)"
      ],
      "metadata": {
        "id": "Aqpm56glrBs9"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#adding two new coloumns teamId and oppositeTeamID based on the map we created before\n",
        "df_bowl['Team_ID'] = df_bowl['team'].map(team_mapping)\n",
        "df_bowl['Opposite_Team_ID']=df_bowl['opposite team'].map(team_mapping)"
      ],
      "metadata": {
        "id": "Wq5ZI_7ubOjl"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "teh3iHq6bTqa",
        "outputId": "46ec1270-6165-47ce-f545-9d46db405623"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Bowler                 team  over  run  wicket  No_ball   ECO  \\\n",
              "0     Abhishek Sharma  Sunrisers Hyderabad   3.0   26       1        0   8.7   \n",
              "1     Abhishek Sharma  Sunrisers Hyderabad   2.0   15       0        0   7.5   \n",
              "2     Abhishek Sharma  Sunrisers Hyderabad   3.0   42       1        0  14.0   \n",
              "3     Abhishek Sharma  Sunrisers Hyderabad   1.0   13       0        0  13.0   \n",
              "4     Abhishek Sharma  Sunrisers Hyderabad   3.0   28       0        0   9.3   \n",
              "..                ...                  ...   ...  ...     ...      ...   ...   \n",
              "848  Yuzvendra Chahal     Rajasthan Royals   3.5   22       1        0   6.3   \n",
              "849  Yuzvendra Chahal     Rajasthan Royals   4.0   29       4        0   7.3   \n",
              "850  Yuzvendra Chahal     Rajasthan Royals   4.0   25       4        0   6.3   \n",
              "851  Yuzvendra Chahal     Rajasthan Royals   4.0   37       0        0   9.3   \n",
              "852  Yuzvendra Chahal     Rajasthan Royals   4.0   40       0        0  10.0   \n",
              "\n",
              "                   opposite team  bowler_ID  Team_ID  Opposite_Team_ID  \n",
              "0                 Delhi Capitals          0        7                 5  \n",
              "1               Rajasthan Royals          0        7                 6  \n",
              "2           Lucknow Super Giants          0        7                 4  \n",
              "3                 Gujarat Titans          0        7                 1  \n",
              "4    Royal Challengers Bangalore          0        7                 9  \n",
              "..                           ...        ...      ...               ...  \n",
              "848               Gujarat Titans        136        6                 1  \n",
              "849          Sunrisers Hyderabad        136        6                 7  \n",
              "850        Kolkata Knight Riders        136        6                 3  \n",
              "851  Royal Challengers Bangalore        136        6                 9  \n",
              "852                 Punjab Kings        136        6                 2  \n",
              "\n",
              "[830 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b115eb5-befb-44b7-8628-e76390edcd6c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.5</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>25</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>830 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b115eb5-befb-44b7-8628-e76390edcd6c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b115eb5-befb-44b7-8628-e76390edcd6c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b115eb5-befb-44b7-8628-e76390edcd6c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-32c7ac5b-acf0-407d-9b6a-87b67f1b70f8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32c7ac5b-acf0-407d-9b6a-87b67f1b70f8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-32c7ac5b-acf0-407d-9b6a-87b67f1b70f8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "adding a new column in batsmen dataframe and checking for null values and\n",
        "removing them if any have\n",
        "'''\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "df['Strike Rate'] = (df['Run'] / df['Ball']) * 100\n",
        "df['Strike Rate'].fillna(0, inplace=True)\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nAgD_iGgrJDC",
        "outputId": "8bfbe647-7953-42ef-e422-78ab0c6d44f0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Batsman             0\n",
              "team                0\n",
              "Run                 0\n",
              "Ball                0\n",
              "4s                  0\n",
              "6s                  0\n",
              "50s                 0\n",
              "100s                0\n",
              "opposite team       0\n",
              "Batsman_ID          0\n",
              "Team_ID             0\n",
              "Opposite_Team_ID    0\n",
              "Strike Rate         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "w8_b4UUh1wVs",
        "outputId": "217df764-49f9-4c97-fec4-fbaab03f3677"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Batsman                 team  Run  Ball  4s  6s  50s  100s  \\\n",
              "0        Devon Conway  Chennai Super Kings    1     6   0   0    0     0   \n",
              "1     Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9    1     0   \n",
              "2           Moeen Ali  Chennai Super Kings   23    17   4   1    0     0   \n",
              "3          Ben Stokes  Chennai Super Kings    7     6   1   0    0     0   \n",
              "4       Ambati Rayudu  Chennai Super Kings   12    12   0   1    0     0   \n",
              "...               ...                  ...  ...   ...  ..  ..  ...   ...   \n",
              "1109     Shubman Gill       Gujarat Titans  104    52   5   8    0     1   \n",
              "1110    Vijay Shankar       Gujarat Titans   53    35   7   2    1     0   \n",
              "1111    Dasun Shanaka       Gujarat Titans    0     3   0   0    0     0   \n",
              "1112     David Miller       Gujarat Titans    6     7   1   0    0     0   \n",
              "1113    Rahul Tewatia       Gujarat Titans    4     5   0   0    0     0   \n",
              "\n",
              "                    opposite team  Batsman_ID  Team_ID  Opposite_Team_ID  \\\n",
              "0                  Gujarat Titans           0        0                 1   \n",
              "1                  Gujarat Titans           1        0                 1   \n",
              "2                  Gujarat Titans           2        0                 1   \n",
              "3                  Gujarat Titans           3        0                 1   \n",
              "4                  Gujarat Titans           4        0                 1   \n",
              "...                           ...         ...      ...               ...   \n",
              "1109  Royal Challengers Bangalore          10        1                 9   \n",
              "1110  Royal Challengers Bangalore          13        1                 9   \n",
              "1111  Royal Challengers Bangalore         168        1                 9   \n",
              "1112  Royal Challengers Bangalore          84        1                 9   \n",
              "1113  Royal Challengers Bangalore          14        1                 9   \n",
              "\n",
              "      Strike Rate  \n",
              "0       16.666667  \n",
              "1      184.000000  \n",
              "2      135.294118  \n",
              "3      116.666667  \n",
              "4      100.000000  \n",
              "...           ...  \n",
              "1109   200.000000  \n",
              "1110   151.428571  \n",
              "1111     0.000000  \n",
              "1112    85.714286  \n",
              "1113    80.000000  \n",
              "\n",
              "[1106 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d988523-02c8-4f2a-be15-52135e2f6606\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>Batsman_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <th>Strike Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>184.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>135.294118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>116.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1109</th>\n",
              "      <td>Shubman Gill</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>104</td>\n",
              "      <td>52</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>Vijay Shankar</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>53</td>\n",
              "      <td>35</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>151.428571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>Dasun Shanaka</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>168</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>David Miller</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>85.714286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>Rahul Tewatia</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>80.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1106 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d988523-02c8-4f2a-be15-52135e2f6606')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1d988523-02c8-4f2a-be15-52135e2f6606 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1d988523-02c8-4f2a-be15-52135e2f6606');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-738b9347-3653-436b-9675-a6b6877c71d3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-738b9347-3653-436b-9675-a6b6877c71d3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-738b9347-3653-436b-9675-a6b6877c71d3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Mb3Q6LsldLQz",
        "outputId": "d8bc9597-789a-4714-ccd8-831491dce664"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Batsman                 team  Run  Ball  4s  6s  50s  100s  \\\n",
              "0        Devon Conway  Chennai Super Kings    1     6   0   0    0     0   \n",
              "1     Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9    1     0   \n",
              "2           Moeen Ali  Chennai Super Kings   23    17   4   1    0     0   \n",
              "3          Ben Stokes  Chennai Super Kings    7     6   1   0    0     0   \n",
              "4       Ambati Rayudu  Chennai Super Kings   12    12   0   1    0     0   \n",
              "5         Shivam Dube  Chennai Super Kings   19    18   0   1    0     0   \n",
              "6     Ravindra Jadeja  Chennai Super Kings    1     2   0   0    0     0   \n",
              "7            MS Dhoni  Chennai Super Kings   14     7   1   1    0     0   \n",
              "8    Mitchell Santner  Chennai Super Kings    1     3   0   0    0     0   \n",
              "9     Wriddhiman Saha       Gujarat Titans   25    16   2   2    0     0   \n",
              "10       Shubman Gill       Gujarat Titans   63    36   6   3    1     0   \n",
              "11      Sai Sudharsan       Gujarat Titans   22    17   3   0    0     0   \n",
              "12      Hardik Pandya       Gujarat Titans    8    11   0   0    0     0   \n",
              "13      Vijay Shankar       Gujarat Titans   27    21   2   1    0     0   \n",
              "14      Rahul Tewatia       Gujarat Titans   15    14   1   1    0     0   \n",
              "15        Rashid Khan       Gujarat Titans   10     3   1   1    0     0   \n",
              "16  Prabhsimran Singh         Punjab Kings   23    12   2   2    0     0   \n",
              "17     Shikhar Dhawan         Punjab Kings   40    29   6   0    0     0   \n",
              "18  Bhanuka Rajapaksa         Punjab Kings   50    32   5   2    1     0   \n",
              "19      Jitesh Sharma         Punjab Kings   21    11   1   2    0     0   \n",
              "\n",
              "            opposite team  Batsman_ID  Team_ID  Opposite_Team_ID  Strike Rate  \n",
              "0          Gujarat Titans           0        0                 1    16.666667  \n",
              "1          Gujarat Titans           1        0                 1   184.000000  \n",
              "2          Gujarat Titans           2        0                 1   135.294118  \n",
              "3          Gujarat Titans           3        0                 1   116.666667  \n",
              "4          Gujarat Titans           4        0                 1   100.000000  \n",
              "5          Gujarat Titans           5        0                 1   105.555556  \n",
              "6          Gujarat Titans           6        0                 1    50.000000  \n",
              "7          Gujarat Titans           7        0                 1   200.000000  \n",
              "8          Gujarat Titans           8        0                 1    33.333333  \n",
              "9     Chennai Super Kings           9        1                 0   156.250000  \n",
              "10    Chennai Super Kings          10        1                 0   175.000000  \n",
              "11    Chennai Super Kings          11        1                 0   129.411765  \n",
              "12    Chennai Super Kings          12        1                 0    72.727273  \n",
              "13    Chennai Super Kings          13        1                 0   128.571429  \n",
              "14    Chennai Super Kings          14        1                 0   107.142857  \n",
              "15    Chennai Super Kings          15        1                 0   333.333333  \n",
              "16  Kolkata Knight Riders          16        2                 3   191.666667  \n",
              "17  Kolkata Knight Riders          17        2                 3   137.931034  \n",
              "18  Kolkata Knight Riders          18        2                 3   156.250000  \n",
              "19  Kolkata Knight Riders          19        2                 3   190.909091  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-052a4f71-6fba-4ba7-8bee-88856b80a7f8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>Batsman_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <th>Strike Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>184.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>135.294118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>116.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Shivam Dube</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>19</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>105.555556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Ravindra Jadeja</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>MS Dhoni</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>14</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Mitchell Santner</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>33.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Wriddhiman Saha</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>25</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>156.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Shubman Gill</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>63</td>\n",
              "      <td>36</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>175.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Sai Sudharsan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>22</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>129.411765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Hardik Pandya</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>72.727273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Vijay Shankar</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>27</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>128.571429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Rahul Tewatia</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>15</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>107.142857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>333.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Prabhsimran Singh</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>191.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Shikhar Dhawan</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>40</td>\n",
              "      <td>29</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>17</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>137.931034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Bhanuka Rajapaksa</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>50</td>\n",
              "      <td>32</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>156.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Jitesh Sharma</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>21</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>19</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>190.909091</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-052a4f71-6fba-4ba7-8bee-88856b80a7f8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-052a4f71-6fba-4ba7-8bee-88856b80a7f8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-052a4f71-6fba-4ba7-8bee-88856b80a7f8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f27bae97-2a17-49fe-a314-2c8f97e176bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f27bae97-2a17-49fe-a314-2c8f97e176bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f27bae97-2a17-49fe-a314-2c8f97e176bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "Calculating correlations for batsmen dataset\n",
        "'''\n",
        "df.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "pfObWObS_wpN",
        "outputId": "027422c9-feac-412b-88f3-9cc17b92c227"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-33-6a50f1cc61a0>:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  df.corr()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Run      Ball        4s        6s       50s      100s  \\\n",
              "Run               1.000000  0.940558  0.857033  0.787646  0.722227  0.363443   \n",
              "Ball              0.940558  1.000000  0.821540  0.625051  0.674167  0.303625   \n",
              "4s                0.857033  0.821540  1.000000  0.449108  0.624891  0.340952   \n",
              "6s                0.787646  0.625051  0.449108  1.000000  0.575364  0.286341   \n",
              "50s               0.722227  0.674167  0.624891  0.575364  1.000000 -0.037530   \n",
              "100s              0.363443  0.303625  0.340952  0.286341 -0.037530  1.000000   \n",
              "Batsman_ID       -0.144831 -0.153345 -0.108313 -0.124935 -0.079200 -0.020464   \n",
              "Team_ID          -0.008202 -0.011578  0.016402 -0.028410  0.017374  0.035793   \n",
              "Opposite_Team_ID  0.032669  0.017850  0.029013  0.044494  0.022566  0.049637   \n",
              "Strike Rate       0.515843  0.348381  0.410118  0.534143  0.273219  0.094774   \n",
              "\n",
              "                  Batsman_ID   Team_ID  Opposite_Team_ID  Strike Rate  \n",
              "Run                -0.144831 -0.008202          0.032669     0.515843  \n",
              "Ball               -0.153345 -0.011578          0.017850     0.348381  \n",
              "4s                 -0.108313  0.016402          0.029013     0.410118  \n",
              "6s                 -0.124935 -0.028410          0.044494     0.534143  \n",
              "50s                -0.079200  0.017374          0.022566     0.273219  \n",
              "100s               -0.020464  0.035793          0.049637     0.094774  \n",
              "Batsman_ID          1.000000  0.451172         -0.005898    -0.114192  \n",
              "Team_ID             0.451172  1.000000         -0.128127    -0.017734  \n",
              "Opposite_Team_ID   -0.005898 -0.128127          1.000000     0.000722  \n",
              "Strike Rate        -0.114192 -0.017734          0.000722     1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e70a628-dd0f-4174-9dcf-9a25f5bd3883\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>Batsman_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <th>Strike Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Run</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.940558</td>\n",
              "      <td>0.857033</td>\n",
              "      <td>0.787646</td>\n",
              "      <td>0.722227</td>\n",
              "      <td>0.363443</td>\n",
              "      <td>-0.144831</td>\n",
              "      <td>-0.008202</td>\n",
              "      <td>0.032669</td>\n",
              "      <td>0.515843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ball</th>\n",
              "      <td>0.940558</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.821540</td>\n",
              "      <td>0.625051</td>\n",
              "      <td>0.674167</td>\n",
              "      <td>0.303625</td>\n",
              "      <td>-0.153345</td>\n",
              "      <td>-0.011578</td>\n",
              "      <td>0.017850</td>\n",
              "      <td>0.348381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4s</th>\n",
              "      <td>0.857033</td>\n",
              "      <td>0.821540</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.449108</td>\n",
              "      <td>0.624891</td>\n",
              "      <td>0.340952</td>\n",
              "      <td>-0.108313</td>\n",
              "      <td>0.016402</td>\n",
              "      <td>0.029013</td>\n",
              "      <td>0.410118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6s</th>\n",
              "      <td>0.787646</td>\n",
              "      <td>0.625051</td>\n",
              "      <td>0.449108</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.575364</td>\n",
              "      <td>0.286341</td>\n",
              "      <td>-0.124935</td>\n",
              "      <td>-0.028410</td>\n",
              "      <td>0.044494</td>\n",
              "      <td>0.534143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50s</th>\n",
              "      <td>0.722227</td>\n",
              "      <td>0.674167</td>\n",
              "      <td>0.624891</td>\n",
              "      <td>0.575364</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.037530</td>\n",
              "      <td>-0.079200</td>\n",
              "      <td>0.017374</td>\n",
              "      <td>0.022566</td>\n",
              "      <td>0.273219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100s</th>\n",
              "      <td>0.363443</td>\n",
              "      <td>0.303625</td>\n",
              "      <td>0.340952</td>\n",
              "      <td>0.286341</td>\n",
              "      <td>-0.037530</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.020464</td>\n",
              "      <td>0.035793</td>\n",
              "      <td>0.049637</td>\n",
              "      <td>0.094774</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Batsman_ID</th>\n",
              "      <td>-0.144831</td>\n",
              "      <td>-0.153345</td>\n",
              "      <td>-0.108313</td>\n",
              "      <td>-0.124935</td>\n",
              "      <td>-0.079200</td>\n",
              "      <td>-0.020464</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.451172</td>\n",
              "      <td>-0.005898</td>\n",
              "      <td>-0.114192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Team_ID</th>\n",
              "      <td>-0.008202</td>\n",
              "      <td>-0.011578</td>\n",
              "      <td>0.016402</td>\n",
              "      <td>-0.028410</td>\n",
              "      <td>0.017374</td>\n",
              "      <td>0.035793</td>\n",
              "      <td>0.451172</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.128127</td>\n",
              "      <td>-0.017734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <td>0.032669</td>\n",
              "      <td>0.017850</td>\n",
              "      <td>0.029013</td>\n",
              "      <td>0.044494</td>\n",
              "      <td>0.022566</td>\n",
              "      <td>0.049637</td>\n",
              "      <td>-0.005898</td>\n",
              "      <td>-0.128127</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000722</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Strike Rate</th>\n",
              "      <td>0.515843</td>\n",
              "      <td>0.348381</td>\n",
              "      <td>0.410118</td>\n",
              "      <td>0.534143</td>\n",
              "      <td>0.273219</td>\n",
              "      <td>0.094774</td>\n",
              "      <td>-0.114192</td>\n",
              "      <td>-0.017734</td>\n",
              "      <td>0.000722</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e70a628-dd0f-4174-9dcf-9a25f5bd3883')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e70a628-dd0f-4174-9dcf-9a25f5bd3883 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e70a628-dd0f-4174-9dcf-9a25f5bd3883');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e99551ff-ebad-4c40-b7f0-6c554dd4b5cf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e99551ff-ebad-4c40-b7f0-6c554dd4b5cf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e99551ff-ebad-4c40-b7f0-6c554dd4b5cf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "Calculating correlations between variables and creating a heatmap\n",
        "'''\n",
        "import matplotlib.pyplot as plt\n",
        "from seaborn import heatmap\n",
        "heatmap(data=df.corr(),annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 604
        },
        "id": "UNe94TWvAOHj",
        "outputId": "364ba05e-8aa8-4e11-fb67-3c86a6dea2d1"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-34735480c79e>:6: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  heatmap(data=df.corr(),annot=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "# Creating a regression plot for 'Ball' vs. 'Run'\n",
        "'''\n",
        "import seaborn as sea\n",
        "sea.regplot(x=df['Ball'],y=df['Run'],data=df)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "3fClL4BpDE56",
        "outputId": "9df4a338-8104-4f23-aaf7-9e06d9abf2fa"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "ZXGnTdzNGUV8",
        "outputId": "a4694e3e-61aa-4b0a-811f-2c4ecc923000"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Batsman                 team  Run  Ball  4s  6s  50s  100s  \\\n",
              "0        Devon Conway  Chennai Super Kings    1     6   0   0    0     0   \n",
              "1     Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9    1     0   \n",
              "2           Moeen Ali  Chennai Super Kings   23    17   4   1    0     0   \n",
              "3          Ben Stokes  Chennai Super Kings    7     6   1   0    0     0   \n",
              "4       Ambati Rayudu  Chennai Super Kings   12    12   0   1    0     0   \n",
              "...               ...                  ...  ...   ...  ..  ..  ...   ...   \n",
              "1109     Shubman Gill       Gujarat Titans  104    52   5   8    0     1   \n",
              "1110    Vijay Shankar       Gujarat Titans   53    35   7   2    1     0   \n",
              "1111    Dasun Shanaka       Gujarat Titans    0     3   0   0    0     0   \n",
              "1112     David Miller       Gujarat Titans    6     7   1   0    0     0   \n",
              "1113    Rahul Tewatia       Gujarat Titans    4     5   0   0    0     0   \n",
              "\n",
              "                    opposite team  Batsman_ID  Team_ID  Opposite_Team_ID  \\\n",
              "0                  Gujarat Titans           0        0                 1   \n",
              "1                  Gujarat Titans           1        0                 1   \n",
              "2                  Gujarat Titans           2        0                 1   \n",
              "3                  Gujarat Titans           3        0                 1   \n",
              "4                  Gujarat Titans           4        0                 1   \n",
              "...                           ...         ...      ...               ...   \n",
              "1109  Royal Challengers Bangalore          10        1                 9   \n",
              "1110  Royal Challengers Bangalore          13        1                 9   \n",
              "1111  Royal Challengers Bangalore         168        1                 9   \n",
              "1112  Royal Challengers Bangalore          84        1                 9   \n",
              "1113  Royal Challengers Bangalore          14        1                 9   \n",
              "\n",
              "      Strike Rate  \n",
              "0       16.666667  \n",
              "1      184.000000  \n",
              "2      135.294118  \n",
              "3      116.666667  \n",
              "4      100.000000  \n",
              "...           ...  \n",
              "1109   200.000000  \n",
              "1110   151.428571  \n",
              "1111     0.000000  \n",
              "1112    85.714286  \n",
              "1113    80.000000  \n",
              "\n",
              "[1106 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55e20552-6b70-444b-aae2-449607e1fe84\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>Batsman_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <th>Strike Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>184.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>135.294118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>116.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1109</th>\n",
              "      <td>Shubman Gill</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>104</td>\n",
              "      <td>52</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>Vijay Shankar</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>53</td>\n",
              "      <td>35</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>151.428571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>Dasun Shanaka</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>168</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>David Miller</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>85.714286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>Rahul Tewatia</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>80.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1106 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55e20552-6b70-444b-aae2-449607e1fe84')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55e20552-6b70-444b-aae2-449607e1fe84 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55e20552-6b70-444b-aae2-449607e1fe84');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6bca765-a6ec-4b00-87b6-628377586720\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6bca765-a6ec-4b00-87b6-628377586720')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6bca765-a6ec-4b00-87b6-628377586720 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "plotting graph for players  in batting based on runs\n",
        "'''\n",
        "import seaborn as sea\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# top 10 players(batsmen) by most runs\n",
        "top_10_players = df.sort_values(by='Run', ascending=False).head(10)\n",
        "sea.barplot(x='Run', y='Batsman', data=top_10_players)\n",
        "\n",
        "plt.title(\"Top 10 Players with the Most runs in single match\")\n",
        "plt.xlabel(\"Number of 50s\")\n",
        "plt.ylabel(\"Player\")\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "#plt.xticks(rotation=90)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "Wr7X4flMGM0O",
        "outputId": "1515a0eb-5232-495f-b7ed-1c10fcbe26d6"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "Calculating correlations between variables and creating a heatmap\n",
        "'''\n",
        "df_bowl.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "f1pGf57Sb1WS",
        "outputId": "cad9b2ee-ceb8-48a6-b896-87d3ac418704"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-39-dfceb15885f9>:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  df_bowl.corr()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      over       run    wicket   No_ball       ECO  bowler_ID  \\\n",
              "over              1.000000  0.626751  0.425219 -0.010990 -0.343398   0.108436   \n",
              "run               0.626751  1.000000  0.074166  0.106703  0.416249   0.052441   \n",
              "wicket            0.425219  0.074166  1.000000 -0.011126 -0.315732   0.072146   \n",
              "No_ball          -0.010990  0.106703 -0.011126  1.000000  0.131657   0.021708   \n",
              "ECO              -0.343398  0.416249 -0.315732  0.131657  1.000000  -0.025945   \n",
              "bowler_ID         0.108436  0.052441  0.072146  0.021708 -0.025945   1.000000   \n",
              "Team_ID          -0.032241  0.038312 -0.026725  0.043275  0.055638  -0.119157   \n",
              "Opposite_Team_ID -0.013550 -0.026440 -0.000786 -0.047672 -0.008739   0.028554   \n",
              "\n",
              "                   Team_ID  Opposite_Team_ID  \n",
              "over             -0.032241         -0.013550  \n",
              "run               0.038312         -0.026440  \n",
              "wicket           -0.026725         -0.000786  \n",
              "No_ball           0.043275         -0.047672  \n",
              "ECO               0.055638         -0.008739  \n",
              "bowler_ID        -0.119157          0.028554  \n",
              "Team_ID           1.000000         -0.095822  \n",
              "Opposite_Team_ID -0.095822          1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f2c3628-d782-497f-a3a5-21227763012d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>over</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.626751</td>\n",
              "      <td>0.425219</td>\n",
              "      <td>-0.010990</td>\n",
              "      <td>-0.343398</td>\n",
              "      <td>0.108436</td>\n",
              "      <td>-0.032241</td>\n",
              "      <td>-0.013550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>run</th>\n",
              "      <td>0.626751</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.074166</td>\n",
              "      <td>0.106703</td>\n",
              "      <td>0.416249</td>\n",
              "      <td>0.052441</td>\n",
              "      <td>0.038312</td>\n",
              "      <td>-0.026440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wicket</th>\n",
              "      <td>0.425219</td>\n",
              "      <td>0.074166</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.011126</td>\n",
              "      <td>-0.315732</td>\n",
              "      <td>0.072146</td>\n",
              "      <td>-0.026725</td>\n",
              "      <td>-0.000786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>No_ball</th>\n",
              "      <td>-0.010990</td>\n",
              "      <td>0.106703</td>\n",
              "      <td>-0.011126</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.131657</td>\n",
              "      <td>0.021708</td>\n",
              "      <td>0.043275</td>\n",
              "      <td>-0.047672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ECO</th>\n",
              "      <td>-0.343398</td>\n",
              "      <td>0.416249</td>\n",
              "      <td>-0.315732</td>\n",
              "      <td>0.131657</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.025945</td>\n",
              "      <td>0.055638</td>\n",
              "      <td>-0.008739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bowler_ID</th>\n",
              "      <td>0.108436</td>\n",
              "      <td>0.052441</td>\n",
              "      <td>0.072146</td>\n",
              "      <td>0.021708</td>\n",
              "      <td>-0.025945</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.119157</td>\n",
              "      <td>0.028554</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Team_ID</th>\n",
              "      <td>-0.032241</td>\n",
              "      <td>0.038312</td>\n",
              "      <td>-0.026725</td>\n",
              "      <td>0.043275</td>\n",
              "      <td>0.055638</td>\n",
              "      <td>-0.119157</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.095822</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <td>-0.013550</td>\n",
              "      <td>-0.026440</td>\n",
              "      <td>-0.000786</td>\n",
              "      <td>-0.047672</td>\n",
              "      <td>-0.008739</td>\n",
              "      <td>0.028554</td>\n",
              "      <td>-0.095822</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f2c3628-d782-497f-a3a5-21227763012d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f2c3628-d782-497f-a3a5-21227763012d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f2c3628-d782-497f-a3a5-21227763012d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-939ff722-30cf-499f-b65e-3874c6b350ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-939ff722-30cf-499f-b65e-3874c6b350ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-939ff722-30cf-499f-b65e-3874c6b350ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from seaborn import heatmap\n",
        "heatmap(data=df_bowl.corr(),annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 604
        },
        "id": "kkL-Siavb_-Y",
        "outputId": "50c0cbf1-97f4-45fc-e02c-958d08b2b9c9"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-40-9867a213ca2b>:3: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  heatmap(data=df_bowl.corr(),annot=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rvni8jdQkSsq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "'''\n",
        "plotting graph for players  in bolwing  based on economy\n",
        "'''\n",
        "top_10_players = df_bowl.sort_values(by='ECO', ascending=True).head(10)\n",
        "sea.barplot(x='ECO', y='Bowler', data=top_10_players)\n",
        "\n",
        "plt.title(\"Top 10 Players with the less economy\")\n",
        "plt.xlabel(\"Economy\")\n",
        "plt.ylabel(\"Bowler\")\n",
        "plt.xticks(rotation=90)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        },
        "id": "PGE_9dqhdUR5",
        "outputId": "3854def2-0097-45f7-a39b-f2275f4c3677"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "plotting graph for players  in bolwing  based on most winckets\n",
        "'''\n",
        "\n",
        "total_wickets_by_player = df_bowl.groupby('Bowler')['wicket'].sum().reset_index()\n",
        "totalWicketsByPlayer = total_wickets_by_player.sort_values(by='wicket', ascending=False).head(10)\n",
        "sea.barplot(x='Bowler', y='wicket', data=totalWicketsByPlayer)\n",
        "plt.title(\"Total Wickets by Bowler\")\n",
        "plt.xlabel(\"Bowler\")\n",
        "plt.ylabel(\"Total Wickets\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 622
        },
        "id": "uRmE1OJpdvKS",
        "outputId": "aed197ba-9b6d-4e9d-a965-cb4810df9232"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAJMCAYAAADg5EzoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB+PUlEQVR4nO3dd1RU1/s18D0gvUkRQUVFsSFib9iwgr3FXlGjsXeN30TUxNgSW6IJdtTYuzERK6Kg2EWJomLDBhYCCEo/7x+8zM+RNqBw58L+rDVL594B9lCfOfc55yiEEAJEREREMqQldQAiIiKivGIhQ0RERLLFQoaIiIhki4UMERERyRYLGSIiIpItFjJEREQkWyxkiIiISLZYyBAREZFssZAhIiIi2WIhQ1QInDlzBgqFAmfOnNHIjzN06FAYGxvnT6gvwNXVFU5OTlLHKFDly5fH0KFDpY5B9NlYyBDlkUKhUOumzh/9BQsW4ODBg/mad/fu3VAoFDhw4ECGczVr1oRCoYCvr2+Gc2XLloWLi0u+ZsuNFy9eYO7cubhx44bUUXLt0+8NIyMjODo6Yv78+Xj//r3U8YhkqZjUAYjkauvWrSr3t2zZghMnTmQ4Xq1atRzf14IFC/DVV1+hW7duXzKiiqZNmwIA/P390b17d+XxmJgYBAcHo1ixYggICEDLli2V554+fYqnT5+ib9++AIDmzZvjw4cP0NXVzbecOXnx4gXmzZuH8uXLo1atWpLlyKu2bdti8ODBAIDY2FicO3cOs2fPRlBQEPbs2SNxOiL5YSFDlEcDBw5UuR8YGIgTJ05kOK4pSpUqBXt7e/j7+6scv3DhAoQQ6NWrV4Zz6ffTiyAtLS3o6+sXTOBCqnLlyirfI9988w0SExOxf/9+xMfHy/Lzm5ycjNTUVEkLXCq6eGmJKB/FxcVh6tSpsLOzg56eHqpUqYJffvkFH286r1AoEBcXh82bNysvOaT3Ljx58gRjxoxBlSpVYGBgAEtLS/Tq1QuPHz/OU56mTZvi+vXr+PDhg/JYQEAAqlevjvbt2yMwMBCpqakq5xQKBZo0aQIg6x6ZixcvokOHDjA3N4eRkRGcnZ2xcuXKbLPcuHEDJUqUgKurK2JjYwEAz58/x7Bhw1CyZEno6emhevXq2Lhxo/Jtzpw5g/r16wMAPDw8lJ8vb29vAMD9+/fRs2dP2NjYQF9fH2XKlEHfvn0RHR2t1ufn6tWrcHFxgYGBAezt7eHl5aU8FxsbCyMjI0ycODHD2z179gza2tpYuHChWh/nUzY2NlAoFChWTPW15Z49e1C3bl0YGBjAysoKAwcOxPPnz5XnDx8+DIVCgZs3byqP7du3DwqFAj169FB5X9WqVUOfPn2yzREVFYVJkyYpv18dHBywePFile+Jx48fQ6FQ4JdffsGKFStQsWJF6Onp4fbt23l67kSfiyMyRPlECIEuXbrA19cXw4cPR61atXDs2DFMnz4dz58/x/LlywGkXaIaMWIEGjRogJEjRwIAKlasCAC4fPkyzp8/j759+6JMmTJ4/Pgx/vjjD7i6uuL27dswNDTMVaamTZti69atuHjxIlxdXQGkFSsuLi5wcXFBdHQ0goOD4ezsrDxXtWpVWFpaZvk+T5w4gU6dOsHW1hYTJ06EjY0N7ty5gyNHjmT6Rz/9ebm5uaFevXo4dOgQDAwMEBERgUaNGkGhUGDcuHEoUaIEjh49iuHDhyMmJgaTJk1CtWrV8MMPP8DT0xMjR45Es2bNAAAuLi5ITEyEm5sbEhISMH78eNjY2OD58+c4cuQIoqKiYGZmlu3n5r///kOHDh3Qu3dv9OvXD7t378bo0aOhq6uLYcOGwdjYGN27d8euXbuwbNkyaGtrK992x44dEEJgwIABOX4N4uPj8ebNGwBphW5AQAA2b96M/v37qxQy3t7e8PDwQP369bFw4UJERERg5cqVCAgIwPXr11G8eHE0bdoUCoUCZ8+eVX7Nzp07By0tLZXRtdevXyMkJATjxo3LMtf79+/RokULPH/+HKNGjULZsmVx/vx5zJo1Cy9fvsSKFStUHr9p0ybEx8dj5MiR0NPTg4WFRY7PnShfCCL6IsaOHSs+/pE6ePCgACDmz5+v8rivvvpKKBQKERoaqjxmZGQkhgwZkuF9vn//PsOxCxcuCABiy5YtymO+vr4CgPD19c0247///isAiB9//FEIIURSUpIwMjISmzdvFkIIUbJkSbF69WohhBAxMTFCW1tbfP3111l+nOTkZGFvby/KlSsn/vvvP5WPlZqaqvz/kCFDhJGRkRBCCH9/f2Fqaio6duwo4uPjlY8ZPny4sLW1FW/evFF5P3379hVmZmbKz8Xly5cFALFp0yaVx12/fl0AEHv27Mn2c5CZFi1aCABi6dKlymMJCQmiVq1awtraWiQmJgohhDh27JgAII4ePary9s7OzqJFixY5fhwAmd66deum8rlITEwU1tbWwsnJSXz48EF5/MiRIwKA8PT0VB6rXr266N27t/J+nTp1RK9evQQAcefOHSGEEPv37xcARFBQkPJx5cqVU/me+/HHH4WRkZG4d++eSuZvv/1WaGtri7CwMCGEEI8ePRIAhKmpqXj16lWOz5kov/HSElE++eeff6CtrY0JEyaoHJ86dSqEEDh69GiO78PAwED5/6SkJLx9+xYODg4oXrw4rl27lutM1apVg6WlpfLVelBQEOLi4pSzklxcXBAQEAAgrXcmJSVF2R+TmevXr+PRo0eYNGkSihcvrnJOoVBkeLyvry/c3NzQunVr7N+/H3p6egDSRq/27duHzp07QwiBN2/eKG9ubm6Ijo7O8fmmj7gcO3YsTzOAihUrhlGjRinv6+rqYtSoUXj16hWuXr0KAGjTpg1KlSqFbdu2KR8XHByMmzdvqt0b1bVrV5w4cQInTpzAoUOHMGvWLPj4+KB///7KS45XrlzBq1evMGbMGJWemY4dO6Jq1ar4+++/lceaNWuGc+fOAQDevXuHoKAgjBw5ElZWVsrj586dQ/HixbOdYr5nzx40a9YM5ubmKp//Nm3aICUlBWfPnlV5fM+ePVGiRAm1njNRfmIhQ5RPnjx5glKlSsHExETlePospidPnuT4Pj58+ABPT09lz4KVlRVKlCiBqKgotfs+PqZQKODi4qLshQkICIC1tTUcHBwAqBYy6f9mV8g8ePAAANRagyU+Ph4dO3ZE7dq1sXv3bpXG0NevXyMqKgpr165FiRIlVG4eHh4AgFevXmX7/u3t7TFlyhSsX78eVlZWcHNzw+rVq9X+PJUqVQpGRkYqxypXrgwAyp4kLS0tDBgwAAcPHlQWS9u2bYO+vj569eql1scpU6YM2rRpgzZt2qBLly5YsGAB5s+fj/379+PIkSMA/u97o0qVKhnevmrVqirfO82aNcPLly8RGhqK8+fPQ6FQoHHjxioFzrlz59CkSRNoaWX9K//+/fvw8fHJ8Plv06YNgIyff3t7e7WeL1F+YyFDpMHGjx+Pn376Cb1798bu3btx/PhxnDhxApaWlioNmLnRtGlTREdH49atW8r+mHQuLi548uQJnj9/Dn9/f5QqVQoVKlT4Is9FT08PHTt2xMWLF+Hj46NyLv25DBw4UDla8ektveE4O0uXLsXNmzfxv//9Dx8+fMCECRNQvXp1PHv27Is8BwAYPHgwYmNjcfDgQQghsH37dnTq1CnHHpzstG7dGgAyjHqoI73QPHv2LM6dO4c6derAyMhIWcjExsbi+vXryn6irKSmpqJt27ZZfv579uyp8viPRwuJpMRmX6J8Uq5cOZw8eRLv3r1TGZUJCQlRnk+X2WUYANi7dy+GDBmCpUuXKo/Fx8cjKioqz7k+Xk8mICAAkyZNUp6rW7cu9PT0cObMGeVMpOykNyUHBwcrX7lnRaFQYNu2bejatSt69eqFo0ePKhuOS5QoARMTE6SkpKj1frJTo0YN1KhRA99//z3Onz+PJk2awMvLC/Pnz8/27V68eIG4uDiVUZl79+4BSFsFN52TkxNq166Nbdu2oUyZMggLC8Nvv/2W7fvOSXJyMgAoZ2+lf2/cvXsXrVq1Unns3bt3Vb53ypYti7Jly+LcuXN4+PChsmBp3rw5pkyZgj179iAlJQXNmzfPNkPFihURGxub4+efSNNwRIYon3To0AEpKSlYtWqVyvHly5dDoVCgffv2ymNGRkaZFifa2toqU7UB4LfffkNKSkqec9WrVw/6+vrYtm0bnj9/rjIio6enhzp16mD16tWIi4vL9rISANSpUwf29vZYsWJFhvyf5gbS+k7279+P+vXro3Pnzrh06RKAtOfZs2dP7Nu3D8HBwRne7vXr18r/pxcan368mJgYZUGQrkaNGtDS0kJCQkK2zwNIKybWrFmjvJ+YmIg1a9agRIkSqFu3rspjBw0ahOPHj2PFihWwtLRU+VrmxV9//QUgbYVlIO1rZG1tDS8vL5XsR48exZ07d9CxY0eVt2/WrBlOnz6NS5cuKQuZWrVqwcTEBIsWLYKBgUGG5/Cp3r1748KFCzh27FiGc1FRURk+t0SagiMyRPmkc+fOaNmyJb777js8fvwYNWvWxPHjx3Ho0CFMmjRJOZoBpI2EnDx5EsuWLVMuXNewYUN06tQJW7duhZmZGRwdHXHhwgWcPHky2+nQOdHV1UX9+vVx7tw56OnpZfgD5+LiohwByqmQ0dLSwh9//IHOnTujVq1a8PDwgK2tLUJCQvDvv/9m+kfRwMAAR44cQatWrdC+fXv4+fnByckJixYtgq+vLxo2bIivv/4ajo6OiIyMxLVr13Dy5ElERkYCSBs5KF68OLy8vGBiYgIjIyM0bNgQQUFBGDduHHr16oXKlSsjOTkZW7duVRZJOSlVqhQWL16Mx48fo3Llyti1axdu3LiBtWvXQkdHR+Wx/fv3x4wZM3DgwAGMHj06w/ns3Lt3D3/++SeAtCnPgYGB2Lx5MxwcHDBo0CAAgI6ODhYvXgwPDw+0aNEC/fr1U06/Ll++PCZPnqzyPps1a4Zt27ZBoVAov2ba2tpwcXHBsWPH4OrqmuNiddOnT8fhw4fRqVMnDB06FHXr1kVcXBxu3bqFvXv34vHjx7CyslL7eRIVGAlnTBEVKp9OvxZCiHfv3onJkyeLUqVKCR0dHVGpUiXx888/q0xNFkKIkJAQ0bx5c2FgYCAAKKfF/vfff8LDw0NYWVkJY2Nj4ebmJkJCQjJMnVV3+nW6WbNmCQDCxcUlw7n0qbomJiYiOTlZ5VxWH8ff31+0bdtWmJiYCCMjI+Hs7Cx+++035fmPp1+ne/PmjXB0dBQ2Njbi/v37QgghIiIixNixY4WdnZ3Q0dERNjY2onXr1mLt2rUqb3vo0CHh6OgoihUrppyK/fDhQzFs2DBRsWJFoa+vLywsLETLli3FyZMnc/x8tGjRQlSvXl1cuXJFNG7cWOjr64ty5cqJVatWZfk2HTp0EADE+fPnc3z/6fDJtGttbW1RpkwZMXLkSBEREZHh8bt27RK1a9cWenp6wsLCQgwYMEA8e/Ysw+PSp9VXq1ZN5fj8+fMFADF79uwMb/Pp95AQad+vs2bNEg4ODkJXV1dYWVkJFxcX8csvvyinoKdPv/7555/Vft5E+UkhRCbjv0RElK3u3bvj1q1bCA0NlToKUZHGHhkiolx6+fIl/v77b+WlICKSDntkiIjU9OjRIwQEBGD9+vXQ0dFRWUCPiKTBERkiIjX5+flh0KBBePToETZv3gwbGxupIxEVeeyRISIiItniiAwRERHJVqHvkUlNTcWLFy9gYmKS44qgREREpBmEEHj37h1KlSqV7T5hhb6QefHiBezs7KSOQURERHnw9OlTlClTJsvzhb6QSd/j5unTpzA1NZU4DREREakjJiYGdnZ2KnvVZabQFzLpl5NMTU1ZyBAREclMTm0hbPYlIiIi2WIhQ0RERLLFQoaIiIhki4UMERERyRYLGSIiIpItFjJEREQkWyxkiIiISLZYyBAREZFssZAhIiIi2WIhQ0RERLLFQoaIiIhkS9JCZuHChahfvz5MTExgbW2Nbt264e7duyqPcXV1hUKhULl98803EiUmIiIiTSJpIePn54exY8ciMDAQJ06cQFJSEtq1a4e4uDiVx3399dd4+fKl8rZkyRKJEhMREZEmkXT3ax8fH5X73t7esLa2xtWrV9G8eXPlcUNDQ9jY2BR0PCIiItJwGtUjEx0dDQCwsLBQOb5t2zZYWVnByckJs2bNwvv377N8HwkJCYiJiVG5ERERUeEk6YjMx1JTUzFp0iQ0adIETk5OyuP9+/dHuXLlUKpUKdy8eRMzZ87E3bt3sX///kzfz8KFCzFv3rwcP17d6Vu+WPb8cPXnwVJHICIi0ngKIYSQOgQAjB49GkePHoW/vz/KlCmT5eNOnz6N1q1bIzQ0FBUrVsxwPiEhAQkJCcr7MTExsLOzQ3R0NExNTZXHWcgQERFprpiYGJiZmWX4+/0pjRiRGTduHI4cOYKzZ89mW8QAQMOGDQEgy0JGT08Penp6+ZKTiIiINIukhYwQAuPHj8eBAwdw5swZ2Nvb5/g2N27cAADY2trmczoiIiLSdJIWMmPHjsX27dtx6NAhmJiYIDw8HABgZmYGAwMDPHjwANu3b0eHDh1gaWmJmzdvYvLkyWjevDmcnZ2ljE5EREQaQNJC5o8//gCQtujdxzZt2oShQ4dCV1cXJ0+exIoVKxAXFwc7Ozv07NkT33//vQRpiYiISNNIfmkpO3Z2dvDz8yugNERERCQ3GrWODBEREVFusJAhIiIi2WIhQ0RERLLFQoaIiIhki4UMERERyRYLGSIiIpItFjJEREQkWxqx1xLlTdgPNaSOkK2ynrekjkBERIUcR2SIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItopJHYCoyW9NpI6QrYDxAVJHICKiLHBEhoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJlqSFzMKFC1G/fn2YmJjA2toa3bp1w927d1UeEx8fj7Fjx8LS0hLGxsbo2bMnIiIiJEpMREREmkTSQsbPzw9jx45FYGAgTpw4gaSkJLRr1w5xcXHKx0yePBl//fUX9uzZAz8/P7x48QI9evSQMDURERFpCkk3jfTx8VG57+3tDWtra1y9ehXNmzdHdHQ0NmzYgO3bt6NVq1YAgE2bNqFatWoIDAxEo0aNMrzPhIQEJCQkKO/HxMTk75MgIiIiyWjU7tfR0dEAAAsLCwDA1atXkZSUhDZt2igfU7VqVZQtWxYXLlzItJBZuHAh5s2bVzCBiT7i17yF1BGy1OKsn1qPWzX1r3xO8nnGLe2s1uN+GvhVPif5PN/9uVfqCESFhsY0+6ampmLSpElo0qQJnJycAADh4eHQ1dVF8eLFVR5bsmRJhIeHZ/p+Zs2ahejoaOXt6dOn+R2diIiIJKIxIzJjx45FcHAw/P39P+v96OnpQU9P7wulIiIiIk2mESMy48aNw5EjR+Dr64syZcooj9vY2CAxMRFRUVEqj4+IiICNjU0BpyQiIiJNI2khI4TAuHHjcODAAZw+fRr29vYq5+vWrQsdHR2cOnVKeezu3bsICwtD48aNCzouERERaRhJLy2NHTsW27dvx6FDh2BiYqLsezEzM4OBgQHMzMwwfPhwTJkyBRYWFjA1NcX48ePRuHHjTBt9iYiIqGiRtJD5448/AACurq4qxzdt2oShQ4cCAJYvXw4tLS307NkTCQkJcHNzw++//17ASYmIiEgTSVrICCFyfIy+vj5Wr16N1atXF0AiIiIikhONaPYlIiIiygsWMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREsqUxey0REdH/ufPTaakjZKvad62kjkAEgCMyREREJGMsZIiIiEi2WMgQERGRbLGQISIiItliIUNERESyxUKGiIiIZIuFDBEREckWCxkiIiKSLRYyREREJFssZIiIiEi2WMgQERGRbLGQISIiItliIUNERESyxUKGiIiIZIuFDBEREckWCxkiIiKSLRYyREREJFssZIiIiEi2WMgQERGRbLGQISIiItliIUNERESyxUKGiIiIZIuFDBEREckWCxkiIiKSLRYyREREJFssZIiIiEi2WMgQERGRbLGQISIiItliIUNERESyxUKGiIiIZIuFDBEREckWCxkiIiKSLRYyREREJFssZIiIiEi2WMgQERGRbLGQISIiItliIUNERESyxUKGiIiIZIuFDBEREcnWFylkoqKivsS7ISIiIsqVXBcyixcvxq5du5T3e/fuDUtLS5QuXRpBQUFfNBwRERFRdnJdyHh5ecHOzg4AcOLECZw4cQJHjx5F+/btMX369C8ekIiIiCgrxXL7BuHh4cpC5siRI+jduzfatWuH8uXLo2HDhl88IBERydfcuXOljpAtdfPt3tMgf4N8ht69Lqn1uJp7j+Vzks8T9JVbnt4u1yMy5ubmePr0KQDAx8cHbdq0AQAIIZCSkpKnEERERER5kesRmR49eqB///6oVKkS3r59i/bt2wMArl+/DgcHhy8ekIiIiCgruS5kli9fjvLly+Pp06dYsmQJjI2NAQAvX77EmDFjvnhAIiIioqzkupC5cOECJk2ahGLFVN90/PjxOH/+/BcLRkRERJSTXPfItGzZEpGRkRmOR0dHo2XLll8kFBEREZE6cl3ICCGgUCgyHH/79i2MjIy+SCgiIiIidah9aalHjx4AAIVCgaFDh0JPT095LiUlBTdv3oSLi8uXT0hERESUBbULGTMzMwBpIzImJiYwMDBQntPV1UWjRo3w9ddff/mERERERFlQu5DZtGkTAKB8+fKYNm0aLyMRERGR5HLdIzNnzhzo6enh5MmTWLNmDd69ewcAePHiBWJjY3P1vs6ePYvOnTujVKlSUCgUOHjwoMr5oUOHQqFQqNzc3d1zG5mIiIgKqVxPv37y5Anc3d0RFhaGhIQEtG3bFiYmJli8eDESEhLg5eWl9vuKi4tDzZo1MWzYMGUPzqfc3d2Vo0EAVHpziIiIqGjLdSEzceJE1KtXD0FBQbC0tFQe7969e657ZNq3b69cGTgrenp6sLGxyW1MIiIiKgJyXcicO3cO58+fh66ursrx8uXL4/nz518sWLozZ87A2toa5ubmaNWqFebPn69SQH0qISEBCQkJyvsxMTFfPBMRERFphlz3yKSmpma6OeSzZ89gYmLyRUKlc3d3x5YtW3Dq1CksXrwYfn5+aN++fbabUy5cuBBmZmbKW/pO3URERFT45LqQadeuHVasWKG8r1AoEBsbizlz5qBDhw5fMhv69u2LLl26oEaNGujWrRuOHDmCy5cv48yZM1m+zaxZsxAdHa28pe/UTURERIVPri8tLV26FG5ubnB0dER8fDz69++P+/fvw8rKCjt27MiPjEoVKlSAlZUVQkND0bp160wfo6enx4ZgIiKiIiLXhUyZMmUQFBSEXbt2ISgoCLGxsRg+fDgGDBigskhefnj27Bnevn0LW1vbfP04REREJA+5LmR27NiBfv36YcCAARgwYIDKuenTp+Pnn39W+33FxsYiNDRUef/Ro0e4ceMGLCwsYGFhgXnz5qFnz56wsbHBgwcPMGPGDDg4OMDNzS23sYmIiKgQynWPzOjRo3H06NEMxydPnow///wzV+/rypUrqF27NmrXrg0AmDJlCmrXrg1PT09oa2vj5s2b6NKlCypXrozhw4ejbt26OHfuHC8dEREREYA8jMhs27YN/fr1w5EjR9C0aVMAwPjx47F//374+vrm6n25urpCCJHl+WPHjuU2HhERERUhuR6R6dixI37//Xd06dIFV69exZgxY5RFTNWqVfMjIxEREVGmcj0iAwD9+/dHVFQUmjRpghIlSsDPzw8ODg5fOhsRERFRttQqZKZMmZLp8RIlSqBOnTr4/ffflceWLVv2ZZIRERER5UCtQub69euZHndwcEBMTIzyvEKh+HLJiIiIiHKgViGT2yZeIiIiooKQ62bf6OhoREZGZjgeGRnJDRqJiIioQOW6kOnbty927tyZ4fju3bvRt2/fLxKKiIiISB25LmQuXryIli1bZjju6uqKixcvfpFQREREROrIdSGTkJCA5OTkDMeTkpLw4cOHLxKKiIiISB25LmQaNGiAtWvXZjju5eWFunXrfpFQREREROrI9YJ48+fPR5s2bRAUFITWrVsDAE6dOoXLly/j+PHjXzwgERERUVZyPSLTpEkTXLhwAXZ2dti9ezf++usvODg44ObNm2jWrFl+ZCQiIiLKVJ62KKhVqxa2bdv2pbMQERER5YpahUxMTAxMTU2V/89O+uOIiIiI8ptahYy5uTlevnwJa2trFC9ePNOtCIQQ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GvklxcbGIjQ0VHn/0aNHuHHjBiwsLFC2bFlMmjQJ8+fPR6VKlWBvb4/Zs2ejVKlS6Natm3ShiYiISGNIWshcuXIFLVu2VN5Pb9IdMmQIvL29MWPGDMTFxWHkyJGIiopC06ZN4ePjA319fakiExERkQaRtJBxdXXNtvdGoVDghx9+wA8//FCAqYiIiEgucr37NREREZGmYCFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGSLhQwRERHJFgsZIiIiki0WMkRERCRbLGSIiIhItljIEBERkWyxkCEiIiLZYiFDREREssVChoiIiGRLowuZuXPnQqFQqNyqVq0qdSwiIiLSEMWkDpCT6tWr4+TJk8r7xYppfGQiIiIqIBpfFRQrVgw2NjZSxyAiIiINpNGXlgDg/v37KFWqFCpUqIABAwYgLCws28cnJCQgJiZG5UZERESFk0YXMg0bNoS3tzd8fHzwxx9/4NGjR2jWrBnevXuX5dssXLgQZmZmypudnV0BJiYiIqKCpNGFTPv27dGrVy84OzvDzc0N//zzD6KiorB79+4s32bWrFmIjo5W3p4+fVqAiYmIiKggaXyPzMeKFy+OypUrIzQ0NMvH6OnpQU9PrwBTERERkVQ0ekTmU7GxsXjw4AFsbW2ljkJEREQaQKMLmWnTpsHPzw+PHz/G+fPn0b17d2hra6Nfv35SRyMiIiINoNGXlp49e4Z+/frh7du3KFGiBJo2bYrAwECUKFFC6mhERESkATS6kNm5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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "plotting graph for highets total by batsmen\n",
        "'''\n",
        "total_runs_by_player = df.groupby('Batsman')['Run'].sum().reset_index()\n",
        "total_runs_by_player = total_runs_by_player.sort_values(by='Run', ascending=False).head(10)\n",
        "plt.figure(figsize=(10, 6))\n",
        "sea.barplot(x='Batsman', y='Run', data=total_runs_by_player)\n",
        "plt.title(\"Total Runs by Player\")\n",
        "plt.xlabel(\"Players\")\n",
        "plt.ylabel(\"Total Runs\")\n",
        "plt.xticks(rotation=90)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "ORh0p9UsSCR2",
        "outputId": "33b9f3fc-f4fd-4824-a300-4d5beeb6f599"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# for batsmen dataframe\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# features\n",
        "numerical_features = ['Ball', '4s', '6s', 'Strike Rate','Team_ID','Opposite_Team_ID']\n",
        "# target variables\n",
        "target = ['Run','50s','100s']\n",
        "\n",
        "X = df[numerical_features]\n",
        "y = df[target]\n",
        "\n",
        "\n",
        "\n",
        "# splitting data into test and train data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n"
      ],
      "metadata": {
        "id": "ILpaUOMVHN--"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "nb4qkdr0NVmN",
        "outputId": "752b2e24-a1f1-4d45-987a-c4b4b1009e65"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Ball  4s  6s  Strike Rate  Team_ID  Opposite_Team_ID\n",
              "781     11   1   1   136.363636        6                 1\n",
              "728      9   1   0    66.666667        1                 5\n",
              "875     16   1   1   131.250000        0                 5\n",
              "507     43   6   3   155.813953        8                 2\n",
              "319      4   0   0     0.000000        5                 9\n",
              "...    ...  ..  ..          ...      ...               ...\n",
              "466      7   0   0    57.142857        5                 3\n",
              "121      2   0   0    50.000000        2                 6\n",
              "1052    12   1   2   166.666667        6                 2\n",
              "1103     5   1   1   220.000000        9                 1\n",
              "868      2   0   0   100.000000        8                 9\n",
              "\n",
              "[884 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c3cca06-76da-4bdc-9ebd-90bdffe7b8da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>Strike Rate</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>781</th>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>136.363636</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>728</th>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>66.666667</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>875</th>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>131.250000</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>507</th>\n",
              "      <td>43</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>155.813953</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>319</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>466</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>57.142857</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1052</th>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>166.666667</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1103</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>220.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>868</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>884 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c3cca06-76da-4bdc-9ebd-90bdffe7b8da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c3cca06-76da-4bdc-9ebd-90bdffe7b8da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c3cca06-76da-4bdc-9ebd-90bdffe7b8da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e385a1c1-a48b-4bbc-aada-8adf9ba2b55e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e385a1c1-a48b-4bbc-aada-8adf9ba2b55e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e385a1c1-a48b-4bbc-aada-8adf9ba2b55e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# defining models\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.multioutput import MultiOutputRegressor\n",
        "\n",
        "\n",
        "model_linearRegression = LinearRegression()\n",
        "model_DecisionTreeRegressor=DecisionTreeRegressor(max_depth=6)\n",
        "model_RandomForestRegressor=RandomForestRegressor()\n",
        "model_GradientBoostingRegressor=MultiOutputRegressor(GradientBoostingRegressor())\n",
        "\n",
        "# training models on train data\n",
        "model_linearRegression.fit(X_train, y_train)\n",
        "model_DecisionTreeRegressor.fit(X_train, y_train)\n",
        "model_RandomForestRegressor.fit(X_train, y_train)\n",
        "model_GradientBoostingRegressor.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 117
        },
        "id": "-4hDxRDKNT78",
        "outputId": "9bd62e17-6ebb-438a-d64e-807995e974f1"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MultiOutputRegressor(estimator=GradientBoostingRegressor())"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputRegressor(estimator=GradientBoostingRegressor())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultiOutputRegressor</label><div class=\"sk-toggleable__content\"><pre>MultiOutputRegressor(estimator=GradientBoostingRegressor())</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "yZNOgijfmIMB",
        "outputId": "28c17021-f9e1-496b-9b96-12be6f85e4e5"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Ball  4s  6s  Strike Rate  Team_ID  Opposite_Team_ID\n",
              "323     14   3   0   150.000000        5                 9\n",
              "732      2   0   0   150.000000        1                 5\n",
              "56      16   1   1   137.500000        6                 7\n",
              "693     30   3   0   103.333333        9                 4\n",
              "485     12   0   0    50.000000        1                 4\n",
              "...    ...  ..  ..          ...      ...               ...\n",
              "1078     4   1   1   275.000000        4                 3\n",
              "581     21   3   3   190.476190        8                 1\n",
              "1013    20   2   0    80.000000        8                 4\n",
              "1012     9   0   0    77.777778        8                 4\n",
              "528      9   0   0    33.333333        6                 9\n",
              "\n",
              "[222 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40dae693-fcee-4c40-9065-f86e4d575f9c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>Strike Rate</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>323</th>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>732</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>137.500000</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>693</th>\n",
              "      <td>30</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>103.333333</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>485</th>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1078</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>275.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>581</th>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>190.476190</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1013</th>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1012</th>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>77.777778</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>528</th>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>33.333333</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>222 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40dae693-fcee-4c40-9065-f86e4d575f9c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-40dae693-fcee-4c40-9065-f86e4d575f9c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-40dae693-fcee-4c40-9065-f86e4d575f9c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-991eb041-fa64-432a-9104-fc6b95dd02f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-991eb041-fa64-432a-9104-fc6b95dd02f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-991eb041-fa64-432a-9104-fc6b95dd02f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CQ1zWxvJn931",
        "outputId": "b7bf0b22-5e60-4230-b498-9c57bda2c056"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "PaJpIXN4oBOC"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# predicited values using linear regression\n",
        "for index,row in X_test.iterrows():\n",
        "   predict_value=model_linearRegression.predict([[row['Ball'],row['4s'],row['6s'],row['Strike Rate'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "   print(predict_value[0][0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kg1MANN1mLWX",
        "outputId": "dccfa120-038b-4022-fb7b-bd2e79b450cc"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "19.428157431628478\n",
            "1.5197010982413772\n",
            "19.878741039664263\n",
            "30.89457780715993\n",
            "7.494773413637896\n",
            "79.36048322878347\n",
            "-1.7363763488829536\n",
            "26.84023445669458\n",
            "8.035261017303682\n",
            "20.180501985321353\n",
            "16.136584262609233\n",
            "45.66821698890533\n",
            "81.01848096845502\n",
            "81.59441138897138\n",
            "32.55554302543791\n",
            "32.89984093641392\n",
            "19.968008368911565\n",
            "6.23344687933969\n",
            "41.338145441009445\n",
            "25.320475849671954\n",
            "-2.4864138635098563\n",
            "12.6195138081766\n",
            "1.3854412715370863\n",
            "2.7128385360683653\n",
            "54.12962513356253\n",
            "22.626453063709118\n",
            "37.58095363045352\n",
            "28.719807211447208\n",
            "2.1467196620683975\n",
            "6.036361247939675\n",
            "-1.619430949059251\n",
            "0.3096083493283328\n",
            "28.115248699585006\n",
            "47.53306262361676\n",
            "47.754744153790085\n",
            "1.509953869819081\n",
            "-0.8995756841955604\n",
            "28.810233041933493\n",
            "5.121132340093115\n",
            "39.899633604366855\n",
            "6.624861152471132\n",
            "28.783834391399427\n",
            "2.358085437872008\n",
            "16.56553991581817\n",
            "18.831436437810098\n",
            "2.4007067586090756\n",
            "31.992619766534705\n",
            "7.751787124361927\n",
            "24.325395691914025\n",
            "0.825262649017195\n",
            "-1.570330703150309\n",
            "57.74405097626342\n",
            "13.277939841521139\n",
            "11.512048388960983\n",
            "0.07900873361943805\n",
            "5.691043018787596\n",
            "-0.9260176067646042\n",
            "5.535204936564458\n",
            "17.19531198493224\n",
            "18.37338328446617\n",
            "27.01890625559032\n",
            "21.536481950913597\n",
            "3.087593718794399\n",
            "71.50676211288426\n",
            "98.5496398978844\n",
            "14.46389061882261\n",
            "25.445074992023905\n",
            "7.197299288067613\n",
            "21.821289581735282\n",
            "19.526015453949906\n",
            "51.20593764541947\n",
            "9.700576670604294\n",
            "19.34267571568907\n",
            "6.542926602891228\n",
            "23.73984593788582\n",
            "-0.0605949895441622\n",
            "-0.9864253783260062\n",
            "55.32604980241936\n",
            "4.970018155666715\n",
            "5.709920400031018\n",
            "45.06453199916798\n",
            "5.098517288788194\n",
            "32.105425606482754\n",
            "1.4458490430984883\n",
            "13.37319325141828\n",
            "18.00238730347714\n",
            "6.308048251234732\n",
            "-0.056811390315016475\n",
            "59.65651467163387\n",
            "1.3929651979604003\n",
            "20.060297060992195\n",
            "0.704490377929369\n",
            "25.33561200071254\n",
            "55.314671782423886\n",
            "5.498598722520885\n",
            "-1.638305673170003\n",
            "16.770204434533014\n",
            "4.977542082090029\n",
            "20.463762939891158\n",
            "17.924400503690155\n",
            "25.78094076511584\n",
            "-0.8543455815857199\n",
            "5.143790663433013\n",
            "25.764872388187424\n",
            "-0.8052453356767781\n",
            "70.32697834908383\n",
            "19.30972464134401\n",
            "0.8518209631266229\n",
            "39.69830943711288\n",
            "31.294648133258132\n",
            "88.71798073928647\n",
            "1.3816576723079401\n",
            "3.5219727190380095\n",
            "51.064402462345996\n",
            "35.98612273894439\n",
            "-0.1786953124023336\n",
            "-1.7363763488829536\n",
            "8.24562190874281\n",
            "-0.11076361441761762\n",
            "3.802538024010019\n",
            "29.97322307836652\n",
            "-1.7062373711547192\n",
            "10.349642420624303\n",
            "0.9726365062494269\n",
            "26.378381870629525\n",
            "2.4035383704140916\n",
            "3.4842665428514827\n",
            "1.0570751350182581\n",
            "24.336703217566484\n",
            "25.065200351237483\n",
            "16.973188548009155\n",
            "12.211586974472509\n",
            "59.12351700705918\n",
            "49.4045064254357\n",
            "133.1526663126435\n",
            "-1.7363763488829536\n",
            "20.582114047186625\n",
            "41.34260799941676\n",
            "48.079021010551756\n",
            "-0.08926021411218876\n",
            "6.972706573586848\n",
            "-0.21755641162332928\n",
            "48.3918911387197\n",
            "8.7455068663868\n",
            "32.039624088252395\n",
            "2.067480438431221\n",
            "28.060450782487134\n",
            "1.5989835939135313\n",
            "48.296770532732225\n",
            "74.33475958018562\n",
            "25.874649879951328\n",
            "7.6293806672801825\n",
            "24.941242981578153\n",
            "-1.668487922933215\n",
            "-1.570330703150309\n",
            "6.211042471095125\n",
            "93.92011220720666\n",
            "76.93414336755572\n",
            "14.949996046903834\n",
            "51.12002706915398\n",
            "52.300246049383915\n",
            "49.48211635895309\n",
            "1.576368542608611\n",
            "9.643712846949587\n",
            "13.151364988029295\n",
            "9.081753509363503\n",
            "-1.7401599481120995\n",
            "-1.638305673170003\n",
            "2.112753813076039\n",
            "5.1186075403237865\n",
            "62.12715661276037\n",
            "-0.1156588646462553\n",
            "53.87590498656796\n",
            "50.555162228249415\n",
            "1.834579679143741\n",
            "6.81109610892436\n",
            "0.025099781551814804\n",
            "1.0608587342474038\n",
            "46.52652233369628\n",
            "41.537790381280146\n",
            "-0.1495814416036354\n",
            "49.14830847686069\n",
            "25.113125779790053\n",
            "-0.07790941642475113\n",
            "47.632952998419796\n",
            "9.298619361810616\n",
            "10.872669129132197\n",
            "44.49789843295487\n",
            "26.080432985925267\n",
            "6.5278787500446\n",
            "60.89419115220855\n",
            "22.062414415685502\n",
            "-2.422265764754286\n",
            "43.182849580404564\n",
            "-0.8165961333642158\n",
            "-1.7250688232304934\n",
            "29.800280235257542\n",
            "-1.7250688232304934\n",
            "20.433690862525875\n",
            "1.8761127265943909\n",
            "36.733193590019056\n",
            "10.106167955756158\n",
            "6.274102296564278\n",
            "-0.8354708574749679\n",
            "20.289550963434205\n",
            "78.77117145239694\n",
            "7.0467531453782115\n",
            "0.7723788038791071\n",
            "43.757644747547204\n",
            "18.67377839383081\n",
            "20.65370557365324\n",
            "42.83454306275678\n",
            "1.652892545981155\n",
            "0.014860634863867794\n",
            "7.201762031753317\n",
            "0.02621143255130587\n",
            "91.64802430803296\n",
            "12.883051754612591\n",
            "39.992891409356574\n",
            "19.973498844362098\n",
            "5.792943222897341\n",
            "5.09256485043623\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "function to calucualte the metrics like\n",
        "mean squared error\n",
        "root mean squared error\n",
        "mean absoulte error\n",
        "explained variance\n",
        "R-squared\n",
        "'''\n",
        "\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, explained_variance_score, mean_absolute_percentage_error\n",
        "\n",
        "def testPrediction(model,name,X_test,y_test):\n",
        "\n",
        "  y_pred = model.predict(X_test)\n",
        "  mse = mean_squared_error(y_test, y_pred)\n",
        "  rmse = mean_squared_error(y_test, y_pred, squared=False)\n",
        "  mae = mean_absolute_error(y_test, y_pred)\n",
        "  r2 = r2_score(y_test, y_pred)\n",
        "  explained_var = explained_variance_score(y_test, y_pred)\n",
        "  print('Metrics for model ',name)\n",
        "  print(f'Mean Squared Error: {mse}')\n",
        "  print(f'Root Mean Squared Error: {rmse}')\n",
        "  print(f'Mean Absolute Error: {mae}')\n",
        "  print(f'R-squared: {r2}')\n",
        "  print(f'Explained Variance: {explained_var}')\n",
        "  print('--------------------------------------------------------------------')\n",
        "  print('\\n')\n",
        "\n",
        "testPrediction(model_linearRegression,'linearRegression',X_test,y_test)\n",
        "testPrediction(model_DecisionTreeRegressor,'DecisionTreeRegressor',X_test,y_test)\n",
        "testPrediction(model_RandomForestRegressor,'RandomForestRegressor',X_test,y_test)\n",
        "testPrediction(model_GradientBoostingRegressor,'GradientBoostingRegressor',X_test,y_test)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "jWBjOCJ867Xg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ddb4f6d-04c7-408e-c703-8e801169d033"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for model  linearRegression\n",
            "Mean Squared Error: 2.6144306082912907\n",
            "Root Mean Squared Error: 1.0473410420797977\n",
            "Mean Absolute Error: 0.7100141897730623\n",
            "R-squared: 0.5351954738970562\n",
            "Explained Variance: 0.5361154848657637\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  DecisionTreeRegressor\n",
            "Mean Squared Error: 4.944043790333633\n",
            "Root Mean Squared Error: 1.3817459806059267\n",
            "Mean Absolute Error: 0.8021660240672194\n",
            "R-squared: 0.6136237745456173\n",
            "Explained Variance: 0.615444549549896\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  RandomForestRegressor\n",
            "Mean Squared Error: 1.7427291291291283\n",
            "Root Mean Squared Error: 0.8223578124701377\n",
            "Mean Absolute Error: 0.322942942942943\n",
            "R-squared: 0.8407003976210466\n",
            "Explained Variance: 0.8408128551578106\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  GradientBoostingRegressor\n",
            "Mean Squared Error: 2.132200464527884\n",
            "Root Mean Squared Error: 0.9201591536572198\n",
            "Mean Absolute Error: 0.49275614394539846\n",
            "R-squared: 0.7582546029942853\n",
            "Explained Variance: 0.7586819209068545\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "eQa-WgXI7uIa",
        "outputId": "19763cb2-e8f4-4d8d-b830-1ada8c7543a4"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Batsman                 team  Run  Ball  4s  6s  50s  100s  \\\n",
              "0        Devon Conway  Chennai Super Kings    1     6   0   0    0     0   \n",
              "1     Ruturaj Gaikwad  Chennai Super Kings   92    50   4   9    1     0   \n",
              "2           Moeen Ali  Chennai Super Kings   23    17   4   1    0     0   \n",
              "3          Ben Stokes  Chennai Super Kings    7     6   1   0    0     0   \n",
              "4       Ambati Rayudu  Chennai Super Kings   12    12   0   1    0     0   \n",
              "...               ...                  ...  ...   ...  ..  ..  ...   ...   \n",
              "1109     Shubman Gill       Gujarat Titans  104    52   5   8    0     1   \n",
              "1110    Vijay Shankar       Gujarat Titans   53    35   7   2    1     0   \n",
              "1111    Dasun Shanaka       Gujarat Titans    0     3   0   0    0     0   \n",
              "1112     David Miller       Gujarat Titans    6     7   1   0    0     0   \n",
              "1113    Rahul Tewatia       Gujarat Titans    4     5   0   0    0     0   \n",
              "\n",
              "                    opposite team  Batsman_ID  Team_ID  Opposite_Team_ID  \\\n",
              "0                  Gujarat Titans           0        0                 1   \n",
              "1                  Gujarat Titans           1        0                 1   \n",
              "2                  Gujarat Titans           2        0                 1   \n",
              "3                  Gujarat Titans           3        0                 1   \n",
              "4                  Gujarat Titans           4        0                 1   \n",
              "...                           ...         ...      ...               ...   \n",
              "1109  Royal Challengers Bangalore          10        1                 9   \n",
              "1110  Royal Challengers Bangalore          13        1                 9   \n",
              "1111  Royal Challengers Bangalore         168        1                 9   \n",
              "1112  Royal Challengers Bangalore          84        1                 9   \n",
              "1113  Royal Challengers Bangalore          14        1                 9   \n",
              "\n",
              "      Strike Rate  \n",
              "0       16.666667  \n",
              "1      184.000000  \n",
              "2      135.294118  \n",
              "3      116.666667  \n",
              "4      100.000000  \n",
              "...           ...  \n",
              "1109   200.000000  \n",
              "1110   151.428571  \n",
              "1111     0.000000  \n",
              "1112    85.714286  \n",
              "1113    80.000000  \n",
              "\n",
              "[1106 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-511c1c73-dc91-4579-91fc-e53a47cd32e0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Batsman</th>\n",
              "      <th>team</th>\n",
              "      <th>Run</th>\n",
              "      <th>Ball</th>\n",
              "      <th>4s</th>\n",
              "      <th>6s</th>\n",
              "      <th>50s</th>\n",
              "      <th>100s</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>Batsman_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "      <th>Strike Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Devon Conway</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ruturaj Gaikwad</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>184.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moeen Ali</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>135.294118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ben Stokes</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>116.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ambati Rayudu</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1109</th>\n",
              "      <td>Shubman Gill</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>104</td>\n",
              "      <td>52</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>Vijay Shankar</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>53</td>\n",
              "      <td>35</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>151.428571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>Dasun Shanaka</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>168</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>David Miller</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>85.714286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>Rahul Tewatia</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>80.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1106 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-511c1c73-dc91-4579-91fc-e53a47cd32e0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-511c1c73-dc91-4579-91fc-e53a47cd32e0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-511c1c73-dc91-4579-91fc-e53a47cd32e0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d7c1b81d-8dbd-420c-829c-394c2db94efa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7c1b81d-8dbd-420c-829c-394c2db94efa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d7c1b81d-8dbd-420c-829c-394c2db94efa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "'''\n",
        "function to do preiction\n",
        "it will return probale score by a batesmen and 50s and 100s he may achieve\n",
        "'''\n",
        "\n",
        "def predict_runs(batsman_name, opposite_team,current_team):\n",
        "\n",
        "    batsman_data = df[(df['Batsman'] == batsman_name) & (df['opposite team'] == opposite_team) & (df['team'] == current_team)]\n",
        "    ball = batsman_data['Ball'].mean()\n",
        "    fours = batsman_data['4s'].mean()\n",
        "    sixes = batsman_data['6s'].mean()\n",
        "    strike_rate = batsman_data['Strike Rate'].mean()\n",
        "\n",
        "    dataF = pd.DataFrame([np.array([ball,fours,sixes,strike_rate,team_mapping[current_team],team_mapping[opposite_team]])], columns=['Ball', '4s', '6s', 'Strike Rate', 'Team_ID','Opposite_Team_ID'])\n",
        "    for index,row in dataF.iterrows():\n",
        "        predicted_model_linearRegression=model_linearRegression.predict([row])\n",
        "        predicted_model_DecisionTreeRegressor=model_DecisionTreeRegressor.predict([[row['Ball'],row['4s'],row['6s'],row['Strike Rate'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        predicted_model_RandomForestRegressor=model_RandomForestRegressor.predict([[row['Ball'],row['4s'],row['6s'],row['Strike Rate'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        predicted_model_GradientBoostingRegressor=model_GradientBoostingRegressor.predict([[row['Ball'],row['4s'],row['6s'],row['Strike Rate'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        return predicted_model_linearRegression[0],predicted_model_DecisionTreeRegressor[0],predicted_model_RandomForestRegressor[0],predicted_model_GradientBoostingRegressor[0]\n",
        "\n"
      ],
      "metadata": {
        "id": "vnN2aLrIglui"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "batsman_name = 'Virat Kohli'\n",
        "current_team = 'Royal Challengers Bangalore'\n",
        "opposite_team='Kolkata Knight Riders'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_runs(batsman_name, opposite_team,current_team)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_linearRegression[0]} - 50s probability {predicted_model_linearRegression[1] if predicted_model_linearRegression[1] > 0 else 0} - 100s probability {predicted_model_linearRegression[2] if predicted_model_linearRegression[2] >= 0 else 0} ')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_DecisionTreeRegressor[0]} - 50s probability {predicted_model_DecisionTreeRegressor[1] if predicted_model_DecisionTreeRegressor[1] > 0 else 0} - 100s probability {predicted_model_DecisionTreeRegressor[2] if predicted_model_DecisionTreeRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_RandomForestRegressor[0]} - 50s probability {predicted_model_RandomForestRegressor[1] if predicted_model_RandomForestRegressor[1] > 0 else 0} - 100s probability {predicted_model_RandomForestRegressor[2] if predicted_model_RandomForestRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_GradientBoostingRegressor[0]} - 50s probability {predicted_model_GradientBoostingRegressor[1] if predicted_model_GradientBoostingRegressor[1] > 0 else 0} - 100s probability {predicted_model_GradientBoostingRegressor[2] if predicted_model_GradientBoostingRegressor[2] >= 0 else 0} ')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EfFwsZSmgQuJ",
        "outputId": "8fbd3b27-78aa-48f0-eaf3-d43f6d0d205f"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted Runs for Virat Kohli against Kolkata Knight Riders: 33.72710195791166 - 50s probability 0.23337501570039168 - 100s probability 0.025984565298799563 \n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted Runs for Virat Kohli against Kolkata Knight Riders: 34.705882352941174 - 50s probability 0 - 100s probability 0.0 \n",
            "model_RandomForestRegressor\n",
            "Predicted Runs for Virat Kohli against Kolkata Knight Riders: 35.61 - 50s probability 0 - 100s probability 0.0 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted Runs for Virat Kohli against Kolkata Knight Riders: 35.12834823966694 - 50s probability 0 - 100s probability 0 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batsman_name = 'Ambati Rayudu'\n",
        "current_team = 'Chennai Super Kings'\n",
        "opposite_team='Gujarat Titans'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_runs(batsman_name, opposite_team,current_team)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_linearRegression[0]} - 50s probability {predicted_model_linearRegression[1] if predicted_model_linearRegression[1] > 0 else 0} - 100s probability {predicted_model_linearRegression[2] if predicted_model_linearRegression[2] >= 0 else 0} ')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_DecisionTreeRegressor[0]} - 50s probability {predicted_model_DecisionTreeRegressor[1] if predicted_model_DecisionTreeRegressor[1] > 0 else 0} - 100s probability {predicted_model_DecisionTreeRegressor[2] if predicted_model_DecisionTreeRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_RandomForestRegressor[0]} - 50s probability {predicted_model_RandomForestRegressor[1] if predicted_model_RandomForestRegressor[1] > 0 else 0} - 100s probability {predicted_model_RandomForestRegressor[2] if predicted_model_RandomForestRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_GradientBoostingRegressor[0]} - 50s probability {predicted_model_GradientBoostingRegressor[1] if predicted_model_GradientBoostingRegressor[1] > 0 else 0} - 100s probability {predicted_model_GradientBoostingRegressor[2] if predicted_model_GradientBoostingRegressor[2] >= 0 else 0} ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gfxmHn0l09_a",
        "outputId": "da7dca85-eba6-45bb-ece9-9381ceec9dc5"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted Runs for Ambati Rayudu against Gujarat Titans: 13.127989461982779 - 50s probability 0.0226444904343924 - 100s probability 0 \n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted Runs for Ambati Rayudu against Gujarat Titans: 13.62962962962963 - 50s probability 0 - 100s probability 0.0 \n",
            "model_RandomForestRegressor\n",
            "Predicted Runs for Ambati Rayudu against Gujarat Titans: 12.18 - 50s probability 0 - 100s probability 0.0 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted Runs for Ambati Rayudu against Gujarat Titans: 12.385195748261353 - 50s probability 0 - 100s probability 0 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batsman_name = 'Devon Conway'\n",
        "current_team = 'Chennai Super Kings'\n",
        "opposite_team='Gujarat Titans'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_runs(batsman_name, opposite_team,current_team)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_linearRegression[0]} - 50s probability {predicted_model_linearRegression[1] if predicted_model_linearRegression[1] > 0 else 0} - 100s probability {predicted_model_linearRegression[2] if predicted_model_linearRegression[2] >= 0 else 0} ')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_DecisionTreeRegressor[0]} - 50s probability {predicted_model_DecisionTreeRegressor[1] if predicted_model_DecisionTreeRegressor[1] > 0 else 0} - 100s probability {predicted_model_DecisionTreeRegressor[2] if predicted_model_DecisionTreeRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_RandomForestRegressor[0]} - 50s probability {predicted_model_RandomForestRegressor[1] if predicted_model_RandomForestRegressor[1] > 0 else 0} - 100s probability {predicted_model_RandomForestRegressor[2] if predicted_model_RandomForestRegressor[2] >= 0 else 0} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted Runs for {batsman_name} against {opposite_team}: {predicted_model_GradientBoostingRegressor[0]} - 50s probability {predicted_model_GradientBoostingRegressor[1] if predicted_model_GradientBoostingRegressor[1] > 0 else 0} - 100s probability {predicted_model_GradientBoostingRegressor[2] if predicted_model_GradientBoostingRegressor[2] >= 0 else 0} ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xJ2acdZh1QlE",
        "outputId": "39b13ef0-397d-4210-82bc-d42df96cfe6b"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted Runs for Devon Conway against Gujarat Titans: 2.2865496985554117 - 50s probability 0 - 100s probability 0 \n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted Runs for Devon Conway against Gujarat Titans: 1.0 - 50s probability 0 - 100s probability 0.0 \n",
            "model_RandomForestRegressor\n",
            "Predicted Runs for Devon Conway against Gujarat Titans: 1.0 - 50s probability 0 - 100s probability 0.0 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted Runs for Devon Conway against Gujarat Titans: 1.3490495181321982 - 50s probability 0 - 100s probability 0 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "9iBGzBlvfMUw",
        "outputId": "4040d65e-c7f1-4d99-d453-c00b7b80a3e8"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Bowler                 team  over  run  wicket  No_ball   ECO  \\\n",
              "0     Abhishek Sharma  Sunrisers Hyderabad   3.0   26       1        0   8.7   \n",
              "1     Abhishek Sharma  Sunrisers Hyderabad   2.0   15       0        0   7.5   \n",
              "2     Abhishek Sharma  Sunrisers Hyderabad   3.0   42       1        0  14.0   \n",
              "3     Abhishek Sharma  Sunrisers Hyderabad   1.0   13       0        0  13.0   \n",
              "4     Abhishek Sharma  Sunrisers Hyderabad   3.0   28       0        0   9.3   \n",
              "..                ...                  ...   ...  ...     ...      ...   ...   \n",
              "848  Yuzvendra Chahal     Rajasthan Royals   3.5   22       1        0   6.3   \n",
              "849  Yuzvendra Chahal     Rajasthan Royals   4.0   29       4        0   7.3   \n",
              "850  Yuzvendra Chahal     Rajasthan Royals   4.0   25       4        0   6.3   \n",
              "851  Yuzvendra Chahal     Rajasthan Royals   4.0   37       0        0   9.3   \n",
              "852  Yuzvendra Chahal     Rajasthan Royals   4.0   40       0        0  10.0   \n",
              "\n",
              "                   opposite team  bowler_ID  Team_ID  Opposite_Team_ID  \n",
              "0                 Delhi Capitals          0        7                 5  \n",
              "1               Rajasthan Royals          0        7                 6  \n",
              "2           Lucknow Super Giants          0        7                 4  \n",
              "3                 Gujarat Titans          0        7                 1  \n",
              "4    Royal Challengers Bangalore          0        7                 9  \n",
              "..                           ...        ...      ...               ...  \n",
              "848               Gujarat Titans        136        6                 1  \n",
              "849          Sunrisers Hyderabad        136        6                 7  \n",
              "850        Kolkata Knight Riders        136        6                 3  \n",
              "851  Royal Challengers Bangalore        136        6                 9  \n",
              "852                 Punjab Kings        136        6                 2  \n",
              "\n",
              "[830 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eca4ecc5-f488-452e-bef4-0d711bd3f639\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.5</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>25</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>830 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eca4ecc5-f488-452e-bef4-0d711bd3f639')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eca4ecc5-f488-452e-bef4-0d711bd3f639 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eca4ecc5-f488-452e-bef4-0d711bd3f639');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f2691a15-038a-45fb-be00-31dc2d53496c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2691a15-038a-45fb-be00-31dc2d53496c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f2691a15-038a-45fb-be00-31dc2d53496c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# features for bowlers data\n",
        "numerical_features = ['over', 'run', 'ECO', 'No_ball','Team_ID','Opposite_Team_ID']\n",
        "\n",
        "# target ->to be predicted\n",
        "target = ['wicket']\n",
        "\n",
        "X = df_bowl[numerical_features]\n",
        "y = df_bowl[target]\n",
        "\n",
        "\n",
        "# splitting data in to train and test\n",
        "\n",
        "X_train_bowl, X_test_bowl, y_train_bowl, y_test_bowl = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "jWKbnTxkfLEA"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "n1knxOPbp1EQ",
        "outputId": "f63b63fd-1c5a-46fe-87ae-fa4af3e167c6"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     over  run   ECO  No_ball  Team_ID  Opposite_Team_ID\n",
              "624   4.0   32   8.0        0        0                 6\n",
              "471   3.0   24   8.0        1        9                 4\n",
              "296   4.0   30   7.5        0        5                 4\n",
              "574   1.0    8   8.0        0        1                 4\n",
              "173   2.4   28  11.7        0        9                 0\n",
              "..    ...  ...   ...      ...      ...               ...\n",
              "845   4.0   28   7.0        0        6                 9\n",
              "197   2.0   15   7.5        0        2                 8\n",
              "363   4.0   40  10.0        1        3                 1\n",
              "666   4.0   34   8.5        0        6                 9\n",
              "793   4.0   62  15.5        0        9                 0\n",
              "\n",
              "[166 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5549ad7f-5c91-4ed4-bbc7-ad94bab3faa5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>ECO</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>624</th>\n",
              "      <td>4.0</td>\n",
              "      <td>32</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>471</th>\n",
              "      <td>3.0</td>\n",
              "      <td>24</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>4.0</td>\n",
              "      <td>30</td>\n",
              "      <td>7.5</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>1.0</td>\n",
              "      <td>8</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>2.4</td>\n",
              "      <td>28</td>\n",
              "      <td>11.7</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>845</th>\n",
              "      <td>4.0</td>\n",
              "      <td>28</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>666</th>\n",
              "      <td>4.0</td>\n",
              "      <td>34</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>793</th>\n",
              "      <td>4.0</td>\n",
              "      <td>62</td>\n",
              "      <td>15.5</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>166 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5549ad7f-5c91-4ed4-bbc7-ad94bab3faa5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5549ad7f-5c91-4ed4-bbc7-ad94bab3faa5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5549ad7f-5c91-4ed4-bbc7-ad94bab3faa5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d9d9cd5d-6b24-4108-98bd-e7a904fae716\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9d9cd5d-6b24-4108-98bd-e7a904fae716')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d9d9cd5d-6b24-4108-98bd-e7a904fae716 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_bowl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "YtUB3FUHrDuD",
        "outputId": "78ed48fa-aead-4b6f-fc85-9af220671df1"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     wicket\n",
              "624       1\n",
              "471       1\n",
              "296       2\n",
              "574       0\n",
              "173       1\n",
              "..      ...\n",
              "845       1\n",
              "197       0\n",
              "363       0\n",
              "666       1\n",
              "793       1\n",
              "\n",
              "[166 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f5ef2b35-0532-4f99-a8bd-7ea892a39711\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wicket</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>624</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>471</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>845</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>666</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>793</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>166 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5ef2b35-0532-4f99-a8bd-7ea892a39711')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f5ef2b35-0532-4f99-a8bd-7ea892a39711 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f5ef2b35-0532-4f99-a8bd-7ea892a39711');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-90964916-f333-441f-a974-89479592f997\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90964916-f333-441f-a974-89479592f997')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-90964916-f333-441f-a974-89479592f997 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.multioutput import MultiOutputRegressor\n",
        "\n",
        "# defining models\n",
        "model_linearRegression_bowl = LinearRegression()\n",
        "model_DecisionTreeRegressor_bowl=DecisionTreeRegressor(max_depth=6)\n",
        "model_RandomForestRegressor_bowl=RandomForestRegressor()\n",
        "model_GradientBoostingRegressor_bowl=MultiOutputRegressor(GradientBoostingRegressor())\n",
        "\n",
        "# training models\n",
        "model_linearRegression_bowl.fit(X_train_bowl, y_train_bowl)\n",
        "model_DecisionTreeRegressor_bowl.fit(X_train_bowl, y_train_bowl)\n",
        "model_RandomForestRegressor_bowl.fit(X_train_bowl, y_train_bowl)\n",
        "model_GradientBoostingRegressor_bowl.fit(X_train_bowl, y_train_bowl)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 117
        },
        "id": "fVp7HJ8HgHhB",
        "outputId": "f783ab1c-c353-41c1-c967-ead44388ccb8"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MultiOutputRegressor(estimator=GradientBoostingRegressor())"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputRegressor(estimator=GradientBoostingRegressor())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultiOutputRegressor</label><div class=\"sk-toggleable__content\"><pre>MultiOutputRegressor(estimator=GradientBoostingRegressor())</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_bowl.shape,y_train_bowl.shape"
      ],
      "metadata": {
        "id": "Q7LV-q4Ohppp",
        "outputId": "92186b0f-6698-42da-bd0f-3b81fb680956",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((664, 6), (664, 1))"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_bowl.shape,y_test_bowl.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IDJe7Glnhl41",
        "outputId": "2e93ef61-c5b2-408a-ed70-50efa91d704c"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((166, 6), (166, 1))"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "testPrediction(model_linearRegression_bowl,'linearRegression',X_test_bowl,y_test_bowl)\n",
        "testPrediction(model_DecisionTreeRegressor_bowl,'DecisionTreeRegressor',X_test_bowl,y_test_bowl)\n",
        "testPrediction(model_RandomForestRegressor_bowl,'RandomForestRegressor',X_test_bowl,y_test_bowl)\n",
        "testPrediction(model_GradientBoostingRegressor_bowl,'GradientBoostingRegressor',X_test_bowl,y_test_bowl)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-keLdd-lemNn",
        "outputId": "b7e66f6d-8c79-490f-99f3-f44800570e49"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for model  linearRegression\n",
            "Mean Squared Error: 0.8211695496058162\n",
            "Root Mean Squared Error: 0.9061840594525024\n",
            "Mean Absolute Error: 0.6749454865450835\n",
            "R-squared: 0.24484738498455294\n",
            "Explained Variance: 0.24492709775123733\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  DecisionTreeRegressor\n",
            "Mean Squared Error: 0.8875422462843723\n",
            "Root Mean Squared Error: 0.94209460580367\n",
            "Mean Absolute Error: 0.6953586089863021\n",
            "R-squared: 0.18381064112757672\n",
            "Explained Variance: 0.18591240068382187\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  RandomForestRegressor\n",
            "Mean Squared Error: 0.9737951598758982\n",
            "Root Mean Squared Error: 0.9868105997991196\n",
            "Mean Absolute Error: 0.7532441193344808\n",
            "R-squared: 0.10449192639612048\n",
            "Explained Variance: 0.10486140625603269\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Metrics for model  GradientBoostingRegressor\n",
            "Mean Squared Error: 0.8586005690463397\n",
            "Root Mean Squared Error: 0.9266070197480374\n",
            "Mean Absolute Error: 0.7025439342657075\n",
            "R-squared: 0.21042558716365978\n",
            "Explained Variance: 0.21075625729121816\n",
            "--------------------------------------------------------------------\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "'''\n",
        "will predict the how many wickets  a bowler can get\n",
        "'''\n",
        "\n",
        "def predict_wickets_bowl(bowler_name, opposite_team,current_team):\n",
        "    bowler_data = df_bowl[(df_bowl['Bowler'] == bowler_name) & (df_bowl['opposite team'] == opposite_team) & (df_bowl['team'] == current_team)]\n",
        "    run = bowler_data['run'].mean()\n",
        "    wicket = bowler_data['wicket'].mean()\n",
        "    No_ball = bowler_data['No_ball'].mean()\n",
        "    over = bowler_data['over'].mean()\n",
        "    ECO=bowler_data['ECO'].mean()\n",
        "\n",
        "    dataF = pd.DataFrame([np.array([over,run,ECO,No_ball,team_mapping[current_team],team_mapping[opposite_team]])], columns=['over', 'run', 'ECO', 'No_ball','Team_ID','Opposite_Team_ID'])\n",
        "    for index,row in dataF.iterrows():\n",
        "        predicted_model_linearRegression=model_linearRegression_bowl.predict([row])\n",
        "        predicted_model_DecisionTreeRegressor=model_DecisionTreeRegressor_bowl.predict([[row['over'],row['run'],row['ECO'],row['No_ball'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        predicted_model_RandomForestRegressor=model_RandomForestRegressor_bowl.predict([[row['over'],row['run'],row['ECO'],row['No_ball'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        predicted_model_GradientBoostingRegressor=model_GradientBoostingRegressor_bowl.predict([[row['over'],row['run'],row['ECO'],row['No_ball'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "        return predicted_model_linearRegression[0],predicted_model_DecisionTreeRegressor[0],predicted_model_RandomForestRegressor[0],predicted_model_GradientBoostingRegressor[0]"
      ],
      "metadata": {
        "id": "cnl8VKZokb33"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl[df_bowl['Bowler']=='Yuzvendra Chahal']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 731
        },
        "id": "TJODBjvzmOaI",
        "outputId": "a95b8f26-e262-43ef-81d4-a164ffbd691a"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Bowler              team  over  run  wicket  No_ball   ECO  \\\n",
              "839  Yuzvendra Chahal  Rajasthan Royals   4.0   17       4        0   4.3   \n",
              "840  Yuzvendra Chahal  Rajasthan Royals   4.0   50       1        0  12.5   \n",
              "841  Yuzvendra Chahal  Rajasthan Royals   4.0   27       3        0   6.8   \n",
              "842  Yuzvendra Chahal  Rajasthan Royals   4.0   27       2        0   6.8   \n",
              "843  Yuzvendra Chahal  Rajasthan Royals   4.0   36       1        0   9.0   \n",
              "844  Yuzvendra Chahal  Rajasthan Royals   4.0   41       0        0  10.3   \n",
              "845  Yuzvendra Chahal  Rajasthan Royals   4.0   28       1        0   7.0   \n",
              "846  Yuzvendra Chahal  Rajasthan Royals   2.0   21       0        0  10.5   \n",
              "847  Yuzvendra Chahal  Rajasthan Royals   3.0   32       0        0  10.7   \n",
              "848  Yuzvendra Chahal  Rajasthan Royals   3.5   22       1        0   6.3   \n",
              "849  Yuzvendra Chahal  Rajasthan Royals   4.0   29       4        0   7.3   \n",
              "850  Yuzvendra Chahal  Rajasthan Royals   4.0   25       4        0   6.3   \n",
              "851  Yuzvendra Chahal  Rajasthan Royals   4.0   37       0        0   9.3   \n",
              "852  Yuzvendra Chahal  Rajasthan Royals   4.0   40       0        0  10.0   \n",
              "\n",
              "                   opposite team  bowler_ID  Team_ID  Opposite_Team_ID  \n",
              "839          Sunrisers Hyderabad        136        6                 7  \n",
              "840                 Punjab Kings        136        6                 2  \n",
              "841               Delhi Capitals        136        6                 5  \n",
              "842          Chennai Super Kings        136        6                 0  \n",
              "843               Gujarat Titans        136        6                 1  \n",
              "844         Lucknow Super Giants        136        6                 4  \n",
              "845  Royal Challengers Bangalore        136        6                 9  \n",
              "846          Chennai Super Kings        136        6                 0  \n",
              "847               Mumbai Indians        136        6                 8  \n",
              "848               Gujarat Titans        136        6                 1  \n",
              "849          Sunrisers Hyderabad        136        6                 7  \n",
              "850        Kolkata Knight Riders        136        6                 3  \n",
              "851  Royal Challengers Bangalore        136        6                 9  \n",
              "852                 Punjab Kings        136        6                 2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a390d2d9-f8bf-4c7e-912c-71c85dbfe3a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>839</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>4.3</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>840</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12.5</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>841</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>27</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>842</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>27</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>843</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>844</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.3</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>845</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>846</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>2.0</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.5</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>847</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.0</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.7</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>3.5</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>25</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>Yuzvendra Chahal</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>136</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a390d2d9-f8bf-4c7e-912c-71c85dbfe3a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a390d2d9-f8bf-4c7e-912c-71c85dbfe3a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a390d2d9-f8bf-4c7e-912c-71c85dbfe3a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-766faad9-4211-454b-b283-151efbdb2f9d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-766faad9-4211-454b-b283-151efbdb2f9d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-766faad9-4211-454b-b283-151efbdb2f9d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for index,row in X_test_bowl.iterrows():\n",
        "  # numerical_features = ['over', 'run', 'ECO', 'No_ball','Team_ID','Opposite_Team_ID']\n",
        "   predict_value=model_DecisionTreeRegressor_bowl.predict([[row['over'],row['run'],row['ECO'],row['No_ball'],row['Team_ID'],row['Opposite_Team_ID']]])\n",
        "   print(predict_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kjWuaqmBsz1j",
        "outputId": "7c660430-ad36-40a5-8a98-6519fcf796cc"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.65714286]\n",
            "[1.08333333]\n",
            "[1.66666667]\n",
            "[0.]\n",
            "[0.63414634]\n",
            "[1.7260274]\n",
            "[1.38]\n",
            "[0.83035714]\n",
            "[1.]\n",
            "[0.23076923]\n",
            "[0.32692308]\n",
            "[0.]\n",
            "[1.65714286]\n",
            "[1.]\n",
            "[0.23076923]\n",
            "[0.]\n",
            "[0.83035714]\n",
            "[1.7260274]\n",
            "[0.32692308]\n",
            "[1.41176471]\n",
            "[0.32692308]\n",
            "[0.83035714]\n",
            "[0.42857143]\n",
            "[0.83035714]\n",
            "[1.41176471]\n",
            "[1.7260274]\n",
            "[1.75]\n",
            "[0.]\n",
            "[0.63414634]\n",
            "[0.]\n",
            "[4.]\n",
            "[0.23076923]\n",
            "[0.]\n",
            "[1.]\n",
            "[0.]\n",
            "[0.83035714]\n",
            "[0.3]\n",
            "[0.83035714]\n",
            "[1.08333333]\n",
            "[0.83035714]\n",
            "[1.41176471]\n",
            "[1.7260274]\n",
            "[1.41176471]\n",
            "[0.23076923]\n",
            "[1.65714286]\n",
            "[1.7260274]\n",
            "[1.41176471]\n",
            "[0.14285714]\n",
            "[0.83035714]\n",
            "[1.]\n",
            "[1.7260274]\n",
            "[0.83035714]\n",
            "[1.]\n",
            "[1.7260274]\n",
            "[0.23076923]\n",
            "[1.41176471]\n",
            "[1.38]\n",
            "[0.83035714]\n",
            "[1.38]\n",
            "[1.41176471]\n",
            "[1.38]\n",
            "[0.23076923]\n",
            "[1.38]\n",
            "[1.38]\n",
            "[0.23076923]\n",
            "[1.41176471]\n",
            "[1.]\n",
            "[0.83035714]\n",
            "[1.7260274]\n",
            "[1.7260274]\n",
            "[0.14285714]\n",
            "[0.]\n",
            "[0.23076923]\n",
            "[0.32692308]\n",
            "[0.23076923]\n",
            "[1.7260274]\n",
            "[1.]\n",
            "[1.7260274]\n",
            "[1.65714286]\n",
            "[1.]\n",
            "[1.38]\n",
            "[1.41176471]\n",
            "[1.]\n",
            "[0.63414634]\n",
            "[0.23076923]\n",
            "[4.]\n",
            "[1.38]\n",
            "[0.23076923]\n",
            "[1.]\n",
            "[4.]\n",
            "[1.38]\n",
            "[0.14285714]\n",
            "[1.65714286]\n",
            "[0.25]\n",
            "[0.83035714]\n",
            "[0.23076923]\n",
            "[0.14285714]\n",
            "[1.65714286]\n",
            "[0.]\n",
            "[0.83035714]\n",
            "[0.83035714]\n",
            "[0.23076923]\n",
            "[1.7260274]\n",
            "[0.23076923]\n",
            "[0.83035714]\n",
            "[0.14285714]\n",
            "[0.23076923]\n",
            "[0.23076923]\n",
            "[1.7260274]\n",
            "[4.]\n",
            "[1.]\n",
            "[1.]\n",
            "[0.32692308]\n",
            "[3.]\n",
            "[0.83035714]\n",
            "[1.]\n",
            "[1.]\n",
            "[0.23076923]\n",
            "[1.38]\n",
            "[0.23076923]\n",
            "[0.83035714]\n",
            "[1.7260274]\n",
            "[0.63414634]\n",
            "[1.7260274]\n",
            "[0.83035714]\n",
            "[1.7260274]\n",
            "[0.23076923]\n",
            "[1.08333333]\n",
            "[1.]\n",
            "[0.83035714]\n",
            "[0.]\n",
            "[0.]\n",
            "[1.7260274]\n",
            "[0.71428571]\n",
            "[3.]\n",
            "[1.65714286]\n",
            "[0.71428571]\n",
            "[1.]\n",
            "[1.]\n",
            "[0.14285714]\n",
            "[1.7260274]\n",
            "[1.65714286]\n",
            "[0.]\n",
            "[1.]\n",
            "[0.14285714]\n",
            "[1.38]\n",
            "[1.7260274]\n",
            "[1.7260274]\n",
            "[1.41176471]\n",
            "[0.83035714]\n",
            "[1.]\n",
            "[0.23076923]\n",
            "[0.42857143]\n",
            "[0.83035714]\n",
            "[1.65714286]\n",
            "[0.]\n",
            "[1.]\n",
            "[1.7260274]\n",
            "[0.32692308]\n",
            "[0.3]\n",
            "[0.25]\n",
            "[1.38]\n",
            "[0.83333333]\n",
            "[0.83035714]\n",
            "[0.83035714]\n",
            "[1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "bowler_name = 'Yuzvendra Chahal'\n",
        "current_team = 'Rajasthan Royals'\n",
        "opposite_team='Kolkata Knight Riders'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_wickets_bowl(bowler_name, opposite_team,current_team)\n",
        "# print(predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor,predicted_model_SVR)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_linearRegression[0])}')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_DecisionTreeRegressor)}')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_RandomForestRegressor)} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_GradientBoostingRegressor[0])} ')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hsyzELnAl7BA",
        "outputId": "5901695c-75c5-405a-a1c4-d1c349606266"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted wickets for Yuzvendra Chahal against Kolkata Knight Riders: 2\n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted wickets for Yuzvendra Chahal against Kolkata Knight Riders: 2\n",
            "model_RandomForestRegressor\n",
            "Predicted wickets for Yuzvendra Chahal against Kolkata Knight Riders: 3 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted wickets for Yuzvendra Chahal against Kolkata Knight Riders: 2 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl[df_bowl['Bowler']=='Abhishek Sharma']"
      ],
      "metadata": {
        "id": "XctxL-WZpUeD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "514fd8d6-fe9a-49ae-f272-04d19eaae719"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Bowler                 team  over  run  wicket  No_ball   ECO  \\\n",
              "0  Abhishek Sharma  Sunrisers Hyderabad   3.0   26       1        0   8.7   \n",
              "1  Abhishek Sharma  Sunrisers Hyderabad   2.0   15       0        0   7.5   \n",
              "2  Abhishek Sharma  Sunrisers Hyderabad   3.0   42       1        0  14.0   \n",
              "3  Abhishek Sharma  Sunrisers Hyderabad   1.0   13       0        0  13.0   \n",
              "4  Abhishek Sharma  Sunrisers Hyderabad   3.0   28       0        0   9.3   \n",
              "\n",
              "                 opposite team  bowler_ID  Team_ID  Opposite_Team_ID  \n",
              "0               Delhi Capitals          0        7                 5  \n",
              "1             Rajasthan Royals          0        7                 6  \n",
              "2         Lucknow Super Giants          0        7                 4  \n",
              "3               Gujarat Titans          0        7                 1  \n",
              "4  Royal Challengers Bangalore          0        7                 9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26215dc8-d260-4a0e-8afa-8fa04a74bed2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abhishek Sharma</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>3.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26215dc8-d260-4a0e-8afa-8fa04a74bed2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26215dc8-d260-4a0e-8afa-8fa04a74bed2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26215dc8-d260-4a0e-8afa-8fa04a74bed2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c6ad6e2c-dd6a-4a48-8ef2-049e75d0ab66\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6ad6e2c-dd6a-4a48-8ef2-049e75d0ab66')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c6ad6e2c-dd6a-4a48-8ef2-049e75d0ab66 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "bowler_name = 'Abhishek Sharma'\n",
        "current_team = 'Sunrisers Hyderabad'\n",
        "opposite_team='Royal Challengers Bangalore'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_wickets_bowl(bowler_name, opposite_team,current_team)\n",
        "# print(predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor,predicted_model_SVR)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_linearRegression[0])}')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_DecisionTreeRegressor)}')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_RandomForestRegressor)} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_GradientBoostingRegressor[0])} ')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k6Hxgcmv3MKs",
        "outputId": "738c8650-4f17-4c8c-ee73-1b2fa4d0d5e3"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted wickets for Abhishek Sharma against Royal Challengers Bangalore: 1\n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted wickets for Abhishek Sharma against Royal Challengers Bangalore: 0\n",
            "model_RandomForestRegressor\n",
            "Predicted wickets for Abhishek Sharma against Royal Challengers Bangalore: 0 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted wickets for Abhishek Sharma against Royal Challengers Bangalore: 1 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_bowl[df_bowl['Bowler']=='Rashid Khan']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "rD2dCRF23nVW",
        "outputId": "96444d62-b2dc-4735-93b7-f0edc8d92864"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Bowler            team  over  run  wicket  No_ball   ECO  \\\n",
              "577  Rashid Khan  Gujarat Titans   4.0   26       2        0   6.5   \n",
              "578  Rashid Khan  Gujarat Titans   4.0   31       3        0   7.8   \n",
              "579  Rashid Khan  Gujarat Titans   4.0   37       3        0   9.3   \n",
              "580  Rashid Khan  Gujarat Titans   4.0   18       2        0   4.5   \n",
              "581  Rashid Khan  Gujarat Titans   4.0   46       2        0  11.5   \n",
              "582  Rashid Khan  Gujarat Titans   4.0   33       1        0   8.3   \n",
              "583  Rashid Khan  Gujarat Titans   4.0   27       2        0   6.8   \n",
              "584  Rashid Khan  Gujarat Titans   4.0   54       0        0  13.5   \n",
              "585  Rashid Khan  Gujarat Titans   4.0   28       1        1   7.0   \n",
              "586  Rashid Khan  Gujarat Titans   4.0   14       3        0   3.5   \n",
              "587  Rashid Khan  Gujarat Titans   4.0   34       1        0   8.5   \n",
              "588  Rashid Khan  Gujarat Titans   4.0   30       4        0   7.5   \n",
              "589  Rashid Khan  Gujarat Titans   4.0   28       0        0   7.0   \n",
              "590  Rashid Khan  Gujarat Titans   4.0   24       1        0   6.0   \n",
              "\n",
              "                   opposite team  bowler_ID  Team_ID  Opposite_Team_ID  \n",
              "577          Chennai Super Kings        100        1                 0  \n",
              "578               Delhi Capitals        100        1                 5  \n",
              "579        Kolkata Knight Riders        100        1                 3  \n",
              "580                 Punjab Kings        100        1                 2  \n",
              "581             Rajasthan Royals        100        1                 6  \n",
              "582         Lucknow Super Giants        100        1                 4  \n",
              "583               Mumbai Indians        100        1                 8  \n",
              "584        Kolkata Knight Riders        100        1                 3  \n",
              "585               Delhi Capitals        100        1                 5  \n",
              "586             Rajasthan Royals        100        1                 6  \n",
              "587         Lucknow Super Giants        100        1                 4  \n",
              "588               Mumbai Indians        100        1                 8  \n",
              "589          Sunrisers Hyderabad        100        1                 7  \n",
              "590  Royal Challengers Bangalore        100        1                 9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d219f36e-ddfb-4fe4-9ef4-68cf3cffcbe1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bowler</th>\n",
              "      <th>team</th>\n",
              "      <th>over</th>\n",
              "      <th>run</th>\n",
              "      <th>wicket</th>\n",
              "      <th>No_ball</th>\n",
              "      <th>ECO</th>\n",
              "      <th>opposite team</th>\n",
              "      <th>bowler_ID</th>\n",
              "      <th>Team_ID</th>\n",
              "      <th>Opposite_Team_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>577</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>578</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>31</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>579</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>37</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>580</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Punjab Kings</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>581</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>46</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>11.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>582</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.3</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>583</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>27</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>584</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.5</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>585</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>586</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>34</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.5</td>\n",
              "      <td>Lucknow Super Giants</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>588</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Gujarat Titans</td>\n",
              "      <td>4.0</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>100</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d219f36e-ddfb-4fe4-9ef4-68cf3cffcbe1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d219f36e-ddfb-4fe4-9ef4-68cf3cffcbe1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d219f36e-ddfb-4fe4-9ef4-68cf3cffcbe1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0d30c561-0636-488d-bd16-ba2432e01523\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d30c561-0636-488d-bd16-ba2432e01523')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0d30c561-0636-488d-bd16-ba2432e01523 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bowler_name = 'Rashid Khan'\n",
        "current_team = 'Gujarat Titans'\n",
        "opposite_team='Rajasthan Royals'\n",
        "predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor = predict_wickets_bowl(bowler_name, opposite_team,current_team)\n",
        "# print(predicted_model_linearRegression,predicted_model_DecisionTreeRegressor,predicted_model_RandomForestRegressor,predicted_model_GradientBoostingRegressor,predicted_model_SVR)\n",
        "print('model_linearRegression')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_linearRegression[0])}')\n",
        "\n",
        "print('predicted_model_DecisionTreeRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_DecisionTreeRegressor)}')\n",
        "\n",
        "print('model_RandomForestRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_RandomForestRegressor)} ')\n",
        "\n",
        "print('model_GradientBoostingRegressor')\n",
        "print(f'Predicted wickets for {bowler_name} against {opposite_team}: {round(predicted_model_GradientBoostingRegressor[0])} ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fi7ulhUe36iO",
        "outputId": "635dad02-ad06-4b4c-e2b0-b97806183c62"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model_linearRegression\n",
            "Predicted wickets for Rashid Khan against Rajasthan Royals: 1\n",
            "predicted_model_DecisionTreeRegressor\n",
            "Predicted wickets for Rashid Khan against Rajasthan Royals: 4\n",
            "model_RandomForestRegressor\n",
            "Predicted wickets for Rashid Khan against Rajasthan Royals: 3 \n",
            "model_GradientBoostingRegressor\n",
            "Predicted wickets for Rashid Khan against Rajasthan Royals: 3 \n"
          ]
        }
      ]
    }
  ]
}
